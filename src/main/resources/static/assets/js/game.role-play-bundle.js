!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=70)}([function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";var i=[],s=n.document,a=Object.getPrototypeOf,c=i.slice,u=i.concat,l=i.push,f=i.indexOf,p={},h=p.toString,d=p.hasOwnProperty,m=d.toString,g=m.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},x={type:!0,src:!0,noModule:!0};function w(e,t,n){var r,o=(t=t||s).createElement("script");if(o.text=e,n)for(r in x)n[r]&&(o[r]=n[r]);t.head.appendChild(o).parentNode.removeChild(o)}function S(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[h.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)},E=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=S(e);return!y(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.3.1",constructor:T,length:0,toArray:function(){return c.call(this)},get:function(e){return null==e?c.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(c.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:i.sort,splice:i.splice},T.extend=T.fn.extend=function(){var e,t,n,r,o,i,s=arguments[0]||{},a=1,c=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||y(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(r=e[t])&&(u&&r&&(T.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,i=n&&Array.isArray(n)?n:[]):i=n&&T.isPlainObject(n)?n:{},s[t]=T.extend(u,i,r)):void 0!==r&&(s[t]=r));return s},T.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=a(e))||"function"==typeof(n=d.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){w(e)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(E,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?T.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,s=!n;o<i;o++)!t(e[o],o)!==s&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,s=[];if(C(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&s.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&s.push(o);return u.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=i[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){p["[object "+t+"]"]=t.toLowerCase()});var _=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,o,i,s,a,c,u,l,f,p,h,d,m,g,v,y,b,x="sizzle"+1*new Date,w=e.document,S=0,T=0,E=se(),C=se(),_=se(),k=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,A=[],O=A.pop,j=A.push,D=A.push,I=A.slice,L=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+P+"*("+q+")(?:"+P+"*([*^$|!~]?=)"+P+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+P+"*\\]",H=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",W=new RegExp(P+"+","g"),U=new RegExp("^"+P+"+|((?:^|[^\\\\])(?:\\\\.)*)"+P+"+$","g"),B=new RegExp("^"+P+"*,"+P+"*"),F=new RegExp("^"+P+"*([>+~]|"+P+")"+P+"*"),$=new RegExp("="+P+"*([^\\]'\"]*?)"+P+"*\\]","g"),V=new RegExp(H),G=new RegExp("^"+q+"$"),z={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+P+"*(even|odd|(([+-]|)(\\d*)n|)"+P+"*(?:([+-]|)"+P+"*(\\d+)|))"+P+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+P+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+P+"*((?:-\\d)?\\d*)"+P+"*\\)|)(?=[^-]|$)","i")},J=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+P+"?|("+P+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){p()},oe=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{D.apply(A=I.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){D={apply:A.length?function(e,t){j.apply(e,I.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ie(e,t,r,o){var i,a,u,l,f,d,v,y=t&&t.ownerDocument,S=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==S&&9!==S&&11!==S)return r;if(!o&&((t?t.ownerDocument||t:w)!==h&&p(t),t=t||h,m)){if(11!==S&&(f=Q.exec(e)))if(i=f[1]){if(9===S){if(!(u=t.getElementById(i)))return r;if(u.id===i)return r.push(u),r}else if(y&&(u=y.getElementById(i))&&b(t,u)&&u.id===i)return r.push(u),r}else{if(f[2])return D.apply(r,t.getElementsByTagName(e)),r;if((i=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return D.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!_[e+" "]&&(!g||!g.test(e))){if(1!==S)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((l=t.getAttribute("id"))?l=l.replace(te,ne):t.setAttribute("id",l=x),a=(d=s(e)).length;a--;)d[a]="#"+l+" "+ve(d[a]);v=d.join(","),y=K.test(e)&&me(t.parentNode)||t}if(v)try{return D.apply(r,y.querySelectorAll(v)),r}catch(e){}finally{l===x&&t.removeAttribute("id")}}}return c(e.replace(U,"$1"),t,r,o)}function se(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ae(e){return e[x]=!0,e}function ce(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function le(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function he(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function de(e){return ae(function(t){return t=+t,ae(function(n,r){for(var o,i=e([],n.length,t),s=i.length;s--;)n[o=i[s]]&&(n[o]=!(r[o]=n[o]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ie.support={},i=ie.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=ie.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:w;return s!==h&&9===s.nodeType&&s.documentElement?(d=(h=s).documentElement,m=!i(h),w!==h&&(o=h.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ce(function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(h.getElementsByClassName),n.getById=ce(function(e){return d.appendChild(e).id=x,!h.getElementsByName||!h.getElementsByName(x).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=Y.test(h.querySelectorAll))&&(ce(function(e){d.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+P+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+P+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+P+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),d.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=Y.test(y=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ce(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",H)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Y.test(d.compareDocumentPosition),b=t||Y.test(d.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},k=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===h||e.ownerDocument===w&&b(w,e)?-1:t===h||t.ownerDocument===w&&b(w,t)?1:l?L(l,e)-L(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,s=[e],a=[t];if(!o||!i)return e===h?-1:t===h?1:o?-1:i?1:l?L(l,e)-L(l,t):0;if(o===i)return le(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?le(s[r],a[r]):s[r]===w?-1:a[r]===w?1:0},h):h},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&p(e),t=t.replace($,"='$1']"),n.matchesSelector&&m&&!_[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return ie(t,h,null,[e]).length>0},ie.contains=function(e,t){return(e.ownerDocument||e)!==h&&p(e),b(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!==h&&p(e);var o=r.attrHandle[t.toLowerCase()],i=o&&N.call(r.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ie.escape=function(e){return(e+"").replace(te,ne)},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,r=[],o=0,i=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(k),f){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return l=null,e},o=ie.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=ie.selectors={cacheLength:50,createPseudo:ae,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+P+")"+e+"("+P+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var o=ie.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(W," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,c){var u,l,f,p,h,d,m=i!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!c&&!a,b=!1;if(g){if(i){for(;m;){for(p=t;p=p[m];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;d=m="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?g.firstChild:g.lastChild],s&&y){for(b=(h=(u=(l=(f=(p=g)[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===S&&u[1])&&u[2],p=h&&g.childNodes[h];p=++h&&p&&p[m]||(b=h=0)||d.pop();)if(1===p.nodeType&&++b&&p===t){l[e]=[S,h,b];break}}else if(y&&(b=h=(u=(l=(f=(p=t)[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===S&&u[1]),!1===b)for(;(p=++h&&p&&p[m]||(b=h=0)||d.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((l=(f=p[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[S,b]),p!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,n){for(var r,i=o(e,t),s=i.length;s--;)e[r=L(e,i[s])]=!(n[r]=i[s])}):function(e){return o(e,0,n)}):o}},pseudos:{not:ae(function(e){var t=[],n=[],r=a(e.replace(U,"$1"));return r[x]?ae(function(e,t,n,o){for(var i,s=r(e,null,o,[]),a=e.length;a--;)(i=s[a])&&(e[a]=!(t[a]=i))}):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:ae(function(e){return function(t){return ie(e,t).length>0}}),contains:ae(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ae(function(e){return G.test(e||"")||ie.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===d},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:de(function(){return[0]}),last:de(function(e,t){return[t-1]}),eq:de(function(e,t,n){return[n<0?n+t:n]}),even:de(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:de(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:de(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:de(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ge(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(e,t,n){var r=t.dir,o=t.next,i=o||r,s=n&&"parentNode"===i,a=T++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,c){var u,l,f,p=[S,a];if(c){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,c))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(l=(f=t[x]||(t[x]={}))[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=l[i])&&u[0]===S&&u[1]===a)return p[2]=u[2];if(l[i]=p,p[2]=e(t,n,c))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,o){for(var i,s=[],a=0,c=e.length,u=null!=t;a<c;a++)(i=e[a])&&(n&&!n(i,r,o)||(s.push(i),u&&t.push(a)));return s}function we(e,t,n,r,o,i){return r&&!r[x]&&(r=we(r)),o&&!o[x]&&(o=we(o,i)),ae(function(i,s,a,c){var u,l,f,p=[],h=[],d=s.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)ie(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!i&&t?m:xe(m,p,e,a,c),v=n?o||(i?e:d||r)?[]:s:g;if(n&&n(g,v,a,c),r)for(u=xe(v,h),r(u,[],a,c),l=u.length;l--;)(f=u[l])&&(v[h[l]]=!(g[h[l]]=f));if(i){if(o||e){if(o){for(u=[],l=v.length;l--;)(f=v[l])&&u.push(g[l]=f);o(null,v=[],u,c)}for(l=v.length;l--;)(f=v[l])&&(u=o?L(i,f):p[l])>-1&&(i[u]=!(s[u]=f))}}else v=xe(v===s?v.splice(d,v.length):v),o?o(null,s,v,c):D.apply(s,v)})}function Se(e){for(var t,n,o,i=e.length,s=r.relative[e[0].type],a=s||r.relative[" "],c=s?1:0,l=ye(function(e){return e===t},a,!0),f=ye(function(e){return L(t,e)>-1},a,!0),p=[function(e,n,r){var o=!s&&(r||n!==u)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,o}];c<i;c++)if(n=r.relative[e[c].type])p=[ye(be(p),n)];else{if((n=r.filter[e[c].type].apply(null,e[c].matches))[x]){for(o=++c;o<i&&!r.relative[e[o].type];o++);return we(c>1&&be(p),c>1&&ve(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(U,"$1"),n,c<o&&Se(e.slice(c,o)),o<i&&Se(e=e.slice(o)),o<i&&ve(e))}p.push(n)}return be(p)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,s=ie.tokenize=function(e,t){var n,o,i,s,a,c,u,l=C[e+" "];if(l)return t?0:l.slice(0);for(a=e,c=[],u=r.preFilter;a;){for(s in n&&!(o=B.exec(a))||(o&&(a=a.slice(o[0].length)||a),c.push(i=[])),n=!1,(o=F.exec(a))&&(n=o.shift(),i.push({value:n,type:o[0].replace(U," ")}),a=a.slice(n.length)),r.filter)!(o=z[s].exec(a))||u[s]&&!(o=u[s](o))||(n=o.shift(),i.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ie.error(e):C(e,c).slice(0)},a=ie.compile=function(e,t){var n,o=[],i=[],a=_[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Se(t[n]))[x]?o.push(a):i.push(a);(a=_(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,s,a,c,l){var f,d,g,v=0,y="0",b=i&&[],x=[],w=u,T=i||o&&r.find.TAG("*",l),E=S+=null==w?1:Math.random()||.1,C=T.length;for(l&&(u=s===h||s||l);y!==C&&null!=(f=T[y]);y++){if(o&&f){for(d=0,s||f.ownerDocument===h||(p(f),a=!m);g=e[d++];)if(g(f,s||h,a)){c.push(f);break}l&&(S=E)}n&&((f=!g&&f)&&v--,i&&b.push(f))}if(v+=y,n&&y!==v){for(d=0;g=t[d++];)g(b,x,s,a);if(i){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=O.call(c));x=xe(x)}D.apply(c,x),l&&!i&&x.length>0&&v+t.length>1&&ie.uniqueSort(c)}return l&&(S=E,u=w),b};return n?ae(i):i}(i,o))).selector=e}return a},c=ie.select=function(e,t,n,o){var i,c,u,l,f,p="function"==typeof e&&e,h=!o&&s(e=p.selector||e);if(n=n||[],1===h.length){if((c=h[0]=h[0].slice(0)).length>2&&"ID"===(u=c[0]).type&&9===t.nodeType&&m&&r.relative[c[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(i=z.needsContext.test(e)?0:c.length;i--&&(u=c[i],!r.relative[l=u.type]);)if((f=r.find[l])&&(o=f(u.matches[0].replace(Z,ee),K.test(c[0].type)&&me(t.parentNode)||t))){if(c.splice(i,1),!(e=o.length&&ve(c)))return D.apply(n,o),n;break}}return(p||a(e,h))(o,t,!m,n,!t||K.test(e)&&me(t.parentNode)||t),n},n.sortStable=x.split("").sort(k).join("")===x,n.detectDuplicates=!!f,p(),n.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||ue(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),ie}(n);T.find=_,T.expr=_.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=_.uniqueSort,T.text=_.getText,T.isXMLDoc=_.isXML,T.contains=_.contains,T.escapeSelector=_.escape;var k=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&T(e).is(n))break;r.push(e)}return r},N=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=T.expr.match.needsContext;function O(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,t,n){return y(t)?T.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?T.grep(e,function(e){return e===t!==n}):"string"!=typeof t?T.grep(e,function(e){return f.call(t,e)>-1!==n}):T.filter(t,e,n)}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,function(e){return 1===e.nodeType}))},T.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(T(e).filter(function(){for(t=0;t<r;t++)if(T.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)T.find(e,o[t],n);return r>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&A.test(e)?T(e):e||[],!1).length}});var I,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||I,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),j.test(r[1])&&T.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=s.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,I=T(s);var R=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function q(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],s="string"!=typeof e&&T(e);if(!A.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?T.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?f.call(T(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return q(e,"nextSibling")},prev:function(e){return q(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return N((e.parentNode||{}).firstChild,e)},children:function(e){return N(e.firstChild)},contents:function(e){return O(e,"iframe")?e.contentDocument:(O(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},function(e,t){T.fn[e]=function(n,r){var o=T.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=T.filter(r,o)),this.length>1&&(P[e]||T.uniqueSort(o),R.test(e)&&o.reverse()),this.pushStack(o)}});var M=/[^\x20\t\r\n\f]+/g;function H(e){return e}function W(e){throw e}function U(e,t,n,r){var o;try{e&&y(o=e.promise)?o.call(e).done(t).fail(n):e&&y(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(M)||[],function(e,n){t[n]=!0}),t}(e):T.extend({},e);var t,n,r,o,i=[],s=[],a=-1,c=function(){for(o=o||e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<i.length;)!1===i[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},u={add:function(){return i&&(n&&!t&&(a=i.length-1,s.push(n)),function t(n){T.each(n,function(n,r){y(r)?e.unique&&u.has(r)||i.push(r):r&&r.length&&"string"!==S(r)&&t(r)})}(arguments),n&&!t&&c()),this},remove:function(){return T.each(arguments,function(e,t){for(var n;(n=T.inArray(t,i,n))>-1;)i.splice(n,1),n<=a&&a--}),this},has:function(e){return e?T.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=s=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return T.Deferred(function(n){T.each(t,function(t,r){var o=y(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,r,o){var i=0;function s(e,t,r,o){return function(){var a=this,c=arguments,u=function(){var n,u;if(!(e<i)){if((n=r.apply(a,c))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(u)?o?u.call(n,s(i,t,H,o),s(i,t,W,o)):(i++,u.call(n,s(i,t,H,o),s(i,t,W,o),s(i,t,H,t.notifyWith))):(r!==H&&(a=void 0,c=[n]),(o||t.resolveWith)(a,c))}},l=o?u:function(){try{u()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,l.stackTrace),e+1>=i&&(r!==W&&(a=void 0,c=[n]),t.rejectWith(a,c))}};e?l():(T.Deferred.getStackHook&&(l.stackTrace=T.Deferred.getStackHook()),n.setTimeout(l))}}return T.Deferred(function(n){t[0][3].add(s(0,n,y(o)?o:H,n.notifyWith)),t[1][3].add(s(0,n,y(e)?e:H)),t[2][3].add(s(0,n,y(r)?r:W))}).promise()},promise:function(e){return null!=e?T.extend(e,o):o}},i={};return T.each(t,function(e,n){var s=n[2],a=n[5];o[n[1]]=s.add,a&&s.add(function(){r=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=s.fireWith}),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=c.call(arguments),i=T.Deferred(),s=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?c.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(U(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||y(o[n]&&o[n].then)))return i.then();for(;n--;)U(o[n],s(n),i.reject);return i.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&B.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){n.setTimeout(function(){throw e})};var F=T.Deferred();function $(){s.removeEventListener("DOMContentLoaded",$),n.removeEventListener("load",$),T.ready()}T.fn.ready=function(e){return F.then(e).catch(function(e){T.readyException(e)}),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||F.resolveWith(s,[T]))}}),T.ready.then=F.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(T.ready):(s.addEventListener("DOMContentLoaded",$),n.addEventListener("load",$));var V=function(e,t,n,r,o,i,s){var a=0,c=e.length,u=null==n;if("object"===S(n))for(a in o=!0,n)V(e,t,a,n[a],!0,i,s);else if(void 0!==r&&(o=!0,y(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(T(e),n)})),t))for(;a<c;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return o?e:u?t.call(e):c?t(e[0],n):i},G=/^-ms-/,z=/-([a-z])/g;function J(e,t){return t.toUpperCase()}function X(e){return e.replace(G,"ms-").replace(z,J)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=T.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[X(t)]=n;else for(r in t)o[X(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in r?[t]:t.match(M)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var K=new Q,Z=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return Z.hasData(e)||K.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,r,o,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(o=Z.get(i),1===i.nodeType&&!K.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=X(r.slice(5)),ne(i,r,o[r]));K.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Z.set(this,e)}):V(this,function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),T.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,o=n.shift(),i=T._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){T.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:T.Callbacks("once memory").add(function(){K.remove(e,[t+"queue",n])})})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each(function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)})},dequeue:function(e){return this.each(function(){T.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=T.Deferred(),i=this,s=this.length,a=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=K.get(i[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&T.contains(e.ownerDocument,e)&&"none"===T.css(e,"display")},ae=function(e,t,n,r){var o,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=s[i];return o};function ce(e,t,n,r){var o,i,s=20,a=r?function(){return r.cur()}:function(){return T.css(e,t,"")},c=a(),u=n&&n[3]||(T.cssNumber[t]?"":"px"),l=(T.cssNumber[t]||"px"!==u&&+c)&&oe.exec(T.css(e,t));if(l&&l[3]!==u){for(c/=2,u=u||l[3],l=+c||1;s--;)T.style(e,t,l+u),(1-i)*(1-(i=a()/c||.5))<=0&&(s=0),l/=i;l*=2,T.style(e,t,l+u),n=n||[]}return n&&(l=+l||+c||0,o=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=l,r.end=o)),o}var ue={};function le(e){var t,n=e.ownerDocument,r=e.nodeName,o=ue[r];return o||(t=n.body.appendChild(n.createElement(r)),o=T.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),ue[r]=o,o)}function fe(e,t){for(var n,r,o=[],i=0,s=e.length;i<s;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=K.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&se(r)&&(o[i]=le(r))):"none"!==n&&(o[i]="none",K.set(r,"display",n)));for(i=0;i<s;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}T.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?T(this).show():T(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,de=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&O(e,t)?T.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var ye,be,xe=/<|&#?\w+;/;function we(e,t,n,r,o){for(var i,s,a,c,u,l,f=t.createDocumentFragment(),p=[],h=0,d=e.length;h<d;h++)if((i=e[h])||0===i)if("object"===S(i))T.merge(p,i.nodeType?[i]:i);else if(xe.test(i)){for(s=s||f.appendChild(t.createElement("div")),a=(he.exec(i)||["",""])[1].toLowerCase(),c=me[a]||me._default,s.innerHTML=c[1]+T.htmlPrefilter(i)+c[2],l=c[0];l--;)s=s.lastChild;T.merge(p,s.childNodes),(s=f.firstChild).textContent=""}else p.push(t.createTextNode(i));for(f.textContent="",h=0;i=p[h++];)if(r&&T.inArray(i,r)>-1)o&&o.push(i);else if(u=T.contains(i.ownerDocument,i),s=ge(f.appendChild(i),"script"),u&&ve(s),n)for(l=0;i=s[l++];)de.test(i.type||"")&&n.push(i);return f}ye=s.createDocumentFragment().appendChild(s.createElement("div")),(be=s.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),ye.appendChild(be),v.checkClone=ye.cloneNode(!0).cloneNode(!0).lastChild.checked,ye.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ye.cloneNode(!0).lastChild.defaultValue;var Se=s.documentElement,Te=/^key/,Ee=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function _e(){return!0}function ke(){return!1}function Ne(){try{return s.activeElement}catch(e){}}function Ae(e,t,n,r,o,i){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,a,n,r,t[a],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=ke;else if(!o)return e;return 1===i&&(s=o,(o=function(e){return T().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=T.guid++)),e.each(function(){T.event.add(this,t,o,r,n)})}T.event={global:{},add:function(e,t,n,r,o){var i,s,a,c,u,l,f,p,h,d,m,g=K.get(e);if(g)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&T.find.matchesSelector(Se,o),n.guid||(n.guid=T.guid++),(c=g.events)||(c=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(M)||[""]).length;u--;)h=m=(a=Ce.exec(t[u])||[])[1],d=(a[2]||"").split(".").sort(),h&&(f=T.event.special[h]||{},h=(o?f.delegateType:f.bindType)||h,f=T.event.special[h]||{},l=T.extend({type:h,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&T.expr.match.needsContext.test(o),namespace:d.join(".")},i),(p=c[h])||((p=c[h]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,d,s)||e.addEventListener&&e.addEventListener(h,s)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,l):p.push(l),T.event.global[h]=!0)},remove:function(e,t,n,r,o){var i,s,a,c,u,l,f,p,h,d,m,g=K.hasData(e)&&K.get(e);if(g&&(c=g.events)){for(u=(t=(t||"").match(M)||[""]).length;u--;)if(h=m=(a=Ce.exec(t[u])||[])[1],d=(a[2]||"").split(".").sort(),h){for(f=T.event.special[h]||{},p=c[h=(r?f.delegateType:f.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=p.length;i--;)l=p[i],!o&&m!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(p.splice(i,1),l.selector&&p.delegateCount--,f.remove&&f.remove.call(e,l));s&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,d,g.handle)||T.removeEvent(e,h,g.handle),delete c[h])}else for(h in c)T.event.remove(e,h+t[u],n,r,!0);T.isEmptyObject(c)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,s,a=T.event.fix(e),c=new Array(arguments.length),u=(K.get(this,"events")||{})[a.type]||[],l=T.event.special[a.type]||{};for(c[0]=a,t=1;t<arguments.length;t++)c[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=T.event.handlers.call(this,a,u),t=0;(o=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(r=((T.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,c))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,o,i,s,a=[],c=t.delegateCount,u=e.target;if(c&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(i=[],s={},n=0;n<c;n++)void 0===s[o=(r=t[n]).selector+" "]&&(s[o]=r.needsContext?T(o,this).index(u)>-1:T.find(o,this,null,[u]).length),s[o]&&i.push(r);i.length&&a.push({elem:u,handlers:i})}return u=this,c<t.length&&a.push({elem:u,handlers:t.slice(c)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ne()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ne()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&O(this,"input"))return this.click(),!1},_default:function(e){return O(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?_e:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=_e,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=_e,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=_e,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ee.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,o=e.handleObj;return r&&(r===this||T.contains(this,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),T.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){T.event.remove(this,e,n,t)})}});var Oe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,je=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return O(e,"table")&&O(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Re(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function qe(e,t){var n,r,o,i,s,a,c,u;if(1===t.nodeType){if(K.hasData(e)&&(i=K.access(e),s=K.set(t,i),u=i.events))for(o in delete s.handle,s.events={},u)for(n=0,r=u[o].length;n<r;n++)T.event.add(t,o,u[o][n]);Z.hasData(e)&&(a=Z.access(e),c=T.extend({},a),Z.set(t,c))}}function Me(e,t,n,r){t=u.apply([],t);var o,i,s,a,c,l,f=0,p=e.length,h=p-1,d=t[0],m=y(d);if(m||p>1&&"string"==typeof d&&!v.checkClone&&De.test(d))return e.each(function(o){var i=e.eq(o);m&&(t[0]=d.call(this,o,i.html())),Me(i,t,n,r)});if(p&&(i=(o=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(a=(s=T.map(ge(o,"script"),Re)).length;f<p;f++)c=o,f!==h&&(c=T.clone(c,!0,!0),a&&T.merge(s,ge(c,"script"))),n.call(e[f],c,f);if(a)for(l=s[s.length-1].ownerDocument,T.map(s,Pe),f=0;f<a;f++)c=s[f],de.test(c.type||"")&&!K.access(c,"globalEval")&&T.contains(l,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?T._evalUrl&&T._evalUrl(c.src):w(c.textContent.replace(Ie,""),l,c))}return e}function He(e,t,n){for(var r,o=t?T.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||T.cleanData(ge(r)),r.parentNode&&(n&&T.contains(r.ownerDocument,r)&&ve(ge(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e.replace(Oe,"<$1></$2>")},clone:function(e,t,n){var r,o,i,s,a,c,u,l=e.cloneNode(!0),f=T.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(s=ge(l),r=0,o=(i=ge(e)).length;r<o;r++)a=i[r],c=s[r],void 0,"input"===(u=c.nodeName.toLowerCase())&&pe.test(a.type)?c.checked=a.checked:"input"!==u&&"textarea"!==u||(c.defaultValue=a.defaultValue);if(t)if(n)for(i=i||ge(e),s=s||ge(l),r=0,o=i.length;r<o;r++)qe(i[r],s[r]);else qe(e,l);return(s=ge(l,"script")).length>0&&ve(s,!f&&ge(e,"script")),l},cleanData:function(e){for(var t,n,r,o=T.event.special,i=0;void 0!==(n=e[i]);i++)if(Y(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)o[r]?T.event.remove(n,r):T.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),T.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return V(this,function(e){return void 0===e?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Me(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Me(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Me(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Me(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return T.clone(this,e,t)})},html:function(e){return V(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!je.test(e)&&!me[(he.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Me(this,arguments,function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(ge(this)),n&&n.replaceChild(t,this))},e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){T.fn[e]=function(e){for(var n,r=[],o=T(e),i=o.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),T(o[s])[t](n),l.apply(r,n.get());return this.pushStack(r)}});var We=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Ue=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=new RegExp(ie.join("|"),"i");function Fe(e,t,n){var r,o,i,s,a=e.style;return(n=n||Ue(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||T.contains(e.ownerDocument,e)||(s=T.style(e,t)),!v.pixelBoxStyles()&&We.test(s)&&Be.test(t)&&(r=a.width,o=a.minWidth,i=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=o,a.maxWidth=i)),void 0!==s?s+"":s}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Se.appendChild(u).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,c=12===t(e.marginLeft),l.style.right="60%",a=36===t(e.right),o=36===t(e.width),l.style.position="absolute",i=36===l.offsetWidth||"absolute",Se.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,a,c,u=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),c},scrollboxSize:function(){return e(),i}}))}();var Ve=/^(none|table(?!-c[ea]).+)/,Ge=/^--/,ze={position:"absolute",visibility:"hidden",display:"block"},Je={letterSpacing:"0",fontWeight:"400"},Xe=["Webkit","Moz","ms"],Ye=s.createElement("div").style;function Qe(e){var t=T.cssProps[e];return t||(t=T.cssProps[e]=function(e){if(e in Ye)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ye)return e}(e)||e),t}function Ke(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,o,i){var s="width"===t?1:0,a=0,c=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(c+=T.css(e,n+ie[s],!0,o)),r?("content"===n&&(c-=T.css(e,"padding"+ie[s],!0,o)),"margin"!==n&&(c-=T.css(e,"border"+ie[s]+"Width",!0,o))):(c+=T.css(e,"padding"+ie[s],!0,o),"padding"!==n?c+=T.css(e,"border"+ie[s]+"Width",!0,o):a+=T.css(e,"border"+ie[s]+"Width",!0,o));return!r&&i>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-c-a-.5))),c}function et(e,t,n){var r=Ue(e),o=Fe(e,t,r),i="border-box"===T.css(e,"boxSizing",!1,r),s=i;if(We.test(o)){if(!n)return o;o="auto"}return s=s&&(v.boxSizingReliable()||o===e.style[t]),("auto"===o||!parseFloat(o)&&"inline"===T.css(e,"display",!1,r))&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(o=parseFloat(o)||0)+Ze(e,t,n||(i?"border":"content"),s,r,o)+"px"}function tt(e,t,n,r,o){return new tt.prototype.init(e,t,n,r,o)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,s,a=X(t),c=Ge.test(t),u=e.style;if(c||(t=Qe(a)),s=T.cssHooks[t]||T.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,r))?o:u[t];"string"===(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=ce(e,t,o),i="number"),null!=n&&n==n&&("number"===i&&(n+=o&&o[3]||(T.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(c?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var o,i,s,a=X(t);return Ge.test(t)||(t=Qe(a)),(s=T.cssHooks[t]||T.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Fe(e,t,r)),"normal"===o&&t in Je&&(o=Je[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),T.each(["height","width"],function(e,t){T.cssHooks[t]={get:function(e,n,r){if(n)return!Ve.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):ae(e,ze,function(){return et(e,t,r)})},set:function(e,n,r){var o,i=Ue(e),s="border-box"===T.css(e,"boxSizing",!1,i),a=r&&Ze(e,t,r,s,i);return s&&v.scrollboxSize()===i.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-Ze(e,t,"border",!1,i)-.5)),a&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),Ke(0,n,a)}}}),T.cssHooks.marginLeft=$e(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(e,t){T.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(T.cssHooks[e+t].set=Ke)}),T.fn.extend({css:function(e,t){return V(this,function(e,t,n){var r,o,i={},s=0;if(Array.isArray(t)){for(r=Ue(e),o=t.length;s<o;s++)i[t[s]]=T.css(e,t[s],!1,r);return i}return void 0!==n?T.style(e,t,n):T.css(e,t)},e,t,arguments.length>1)}}),T.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(T.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[T.cssProps[e.prop]]&&!T.cssHooks[e.prop]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=tt.prototype.init,T.fx.step={};var nt,rt,ot=/^(?:toggle|show|hide)$/,it=/queueHooks$/;function st(){rt&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,T.fx.interval),T.fx.tick())}function at(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ct(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function ut(e,t,n){for(var r,o=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),i=0,s=o.length;i<s;i++)if(r=o[i].call(n,t,e))return r}function lt(e,t,n){var r,o,i=0,s=lt.prefilters.length,a=T.Deferred().always(function(){delete c.elem}),c=function(){if(o)return!1;for(var t=nt||at(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),i=0,s=u.tweens.length;i<s;i++)u.tweens[i].run(r);return a.notifyWith(e,[u,r,n]),r<1&&s?n:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||at(),duration:n.duration,tweens:[],createTween:function(t,n){var r=T.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),l=u.props;for(!function(e,t){var n,r,o,i,s;for(n in e)if(o=t[r=X(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(s=T.cssHooks[r])&&"expand"in s)for(n in i=s.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(l,u.opts.specialEasing);i<s;i++)if(r=lt.prefilters[i].call(u,e,l,u.opts))return y(r.stop)&&(T._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return T.map(l,ut,u),y(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),T.fx.timer(T.extend(c,{elem:e,anim:u,queue:u.opts.queue})),u}T.Animation=T.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,o=e.length;r<o;r++)n=e[r],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,s,a,c,u,l,f="width"in t||"height"in t,p=this,h={},d=e.style,m=e.nodeType&&se(e),g=K.get(e,"fxshow");for(r in n.queue||(null==(s=T._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,T.queue(e,"fx").length||s.empty.fire()})})),t)if(o=t[r],ot.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;m=!0}h[r]=g&&g[r]||T.style(e,r)}if((c=!T.isEmptyObject(t))||!T.isEmptyObject(h))for(r in f&&1===e.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(u=g&&g.display)&&(u=K.get(e,"display")),"none"===(l=T.css(e,"display"))&&(u?l=u:(fe([e],!0),u=e.style.display||u,l=T.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===T.css(e,"float")&&(c||(p.done(function(){d.display=u}),null==u&&(l=d.display,u="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",p.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),c=!1,h)c||(g?"hidden"in g&&(m=g.hidden):g=K.access(e,"fxshow",{display:u}),i&&(g.hidden=!m),m&&fe([e],!0),p.done(function(){for(r in m||fe([e]),K.remove(e,"fxshow"),h)T.style(e,r,h[r])})),c=ut(m?g[r]:0,r,p),r in g||(g[r]=c.start,m&&(c.end=c.start,c.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),T.speed=function(e,t,n){var r=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=T.isEmptyObject(e),i=T.speed(t,n,r),s=function(){var t=lt(this,T.extend({},e),i);(o||K.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=T.timers,s=K.get(this);if(o)s[o]&&s[o].stop&&r(s[o]);else for(o in s)s[o]&&s[o].stop&&it.test(o)&&r(s[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||T.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=K.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=T.timers,s=r?r.length:0;for(n.finish=!0,T.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),T.each(["toggle","show","hide"],function(e,t){var n=T.fn[t];T.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,r,o)}}),T.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){T.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),nt=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){rt||(rt=!0,st())},T.fx.stop=function(){rt=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var ft,pt=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return V(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){T.removeAttr(this,e)})}}),T.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?T.prop(e,t,n):(1===i&&T.isXMLDoc(e)||(o=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&O(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(M);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(e,t){var n=pt[t]||T.find.attr;pt[t]=function(e,t,r){var o,i,s=t.toLowerCase();return r||(i=pt[s],pt[s]=o,o=null!=n(e,t,r)?s:null,pt[s]=i),o}});var ht=/^(?:input|select|textarea|button)$/i,dt=/^(?:a|area)$/i;function mt(e){return(e.match(M)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(M)||[]}T.fn.extend({prop:function(e,t){return V(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[T.propFix[e]||e]})}}),T.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&T.isXMLDoc(e)||(t=T.propFix[t]||t,o=T.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):ht.test(e.nodeName)||dt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(e){var t,n,r,o,i,s,a,c=0;if(y(e))return this.each(function(t){T(this).addClass(e.call(this,t,gt(this)))});if((t=vt(e)).length)for(;n=this[c++];)if(o=gt(n),r=1===n.nodeType&&" "+mt(o)+" "){for(s=0;i=t[s++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(a=mt(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,o,i,s,a,c=0;if(y(e))return this.each(function(t){T(this).removeClass(e.call(this,t,gt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[c++];)if(o=gt(n),r=1===n.nodeType&&" "+mt(o)+" "){for(s=0;i=t[s++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(a=mt(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each(function(n){T(this).toggleClass(e.call(this,n,gt(this),t),t)}):this.each(function(){var t,o,i,s;if(r)for(o=0,i=T(this),s=vt(e);t=s[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=gt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+mt(gt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;T.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=y(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,T(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=T.map(o,function(e){return null==e?"":e+""})),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=T.valHooks[o.type]||T.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(yt,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:mt(T.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,s="select-one"===e.type,a=s?null:[],c=s?i+1:o.length;for(r=i<0?c:s?i:0;r<c;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!O(n.parentNode,"optgroup"))){if(t=T(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,o=e.options,i=T.makeArray(t),s=o.length;s--;)((r=o[s]).selected=T.inArray(T.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},v.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,r,o){var i,a,c,u,l,f,p,h,m=[r||s],g=d.call(e,"type")?e.type:e,v=d.call(e,"namespace")?e.namespace.split("."):[];if(a=h=c=r=r||s,3!==r.nodeType&&8!==r.nodeType&&!bt.test(g+T.event.triggered)&&(g.indexOf(".")>-1&&(g=(v=g.split(".")).shift(),v.sort()),l=g.indexOf(":")<0&&"on"+g,(e=e[T.expando]?e:new T.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:T.makeArray(t,[e]),p=T.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(r,t))){if(!o&&!p.noBubble&&!b(r)){for(u=p.delegateType||g,bt.test(u+g)||(a=a.parentNode);a;a=a.parentNode)m.push(a),c=a;c===(r.ownerDocument||s)&&m.push(c.defaultView||c.parentWindow||n)}for(i=0;(a=m[i++])&&!e.isPropagationStopped();)h=a,e.type=i>1?u:p.bindType||g,(f=(K.get(a,"events")||{})[e.type]&&K.get(a,"handle"))&&f.apply(a,t),(f=l&&a[l])&&f.apply&&Y(a)&&(e.result=f.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),t)||!Y(r)||l&&y(r[g])&&!b(r)&&((c=r[l])&&(r[l]=null),T.event.triggered=g,e.isPropagationStopped()&&h.addEventListener(g,xt),r[g](),e.isPropagationStopped()&&h.removeEventListener(g,xt),T.event.triggered=void 0,c&&(r[l]=c)),e.result}},simulate:function(e,t,n){var r=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(r,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each(function(){T.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=K.access(r,t);o||r.addEventListener(e,n,!0),K.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=K.access(r,t)-1;o?K.access(r,t,o):(r.removeEventListener(e,n,!0),K.remove(r,t))}}});var wt=n.location,St=Date.now(),Tt=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var Et=/\[\]$/,Ct=/\r?\n/g,_t=/^(?:submit|button|image|reset|file)$/i,kt=/^(?:input|select|textarea|keygen)/i;function Nt(e,t,n,r){var o;if(Array.isArray(t))T.each(t,function(t,o){n||Et.test(e)?r(e,o):Nt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==S(t))r(e,t);else for(o in t)Nt(e+"["+o+"]",t[o],n,r)}T.param=function(e,t){var n,r=[],o=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,function(){o(this.name,this.value)});else for(n in e)Nt(n,e[n],t,o);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&kt.test(this.nodeName)&&!_t.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}}):{name:t.name,value:n.replace(Ct,"\r\n")}}).get()}});var At=/%20/g,Ot=/#.*$/,jt=/([?&])_=[^&]*/,Dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,Lt=/^\/\//,Rt={},Pt={},qt="*/".concat("*"),Mt=s.createElement("a");function Ht(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(M)||[];if(y(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Wt(e,t,n,r){var o={},i=e===Pt;function s(a){var c;return o[a]=!0,T.each(e[a]||[],function(e,a){var u=a(t,n,r);return"string"!=typeof u||i||o[u]?i?!(c=u):void 0:(t.dataTypes.unshift(u),s(u),!1)}),c}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Ut(e,t){var n,r,o=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&T.extend(!0,e,r),e}Mt.href=wt.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ut(Ut(e,T.ajaxSettings),t):Ut(T.ajaxSettings,e)},ajaxPrefilter:Ht(Rt),ajaxTransport:Ht(Pt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,a,c,u,l,f,p,h,d=T.ajaxSetup({},t),m=d.context||d,g=d.context&&(m.nodeType||m.jquery)?T(m):T.event,v=T.Deferred(),y=T.Callbacks("once memory"),b=d.statusCode||{},x={},w={},S="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(l){if(!a)for(a={};t=Dt.exec(i);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?i:null},setRequestHeader:function(e,t){return null==l&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==l&&(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)E.always(e[E.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||S;return r&&r.abort(t),C(0,t),this}};if(v.promise(E),d.url=((e||d.url||wt.href)+"").replace(Lt,wt.protocol+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(M)||[""],null==d.crossDomain){u=s.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=Mt.protocol+"//"+Mt.host!=u.protocol+"//"+u.host}catch(e){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=T.param(d.data,d.traditional)),Wt(Rt,d,t,E),l)return E;for(p in(f=T.event&&d.global)&&0==T.active++&&T.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!It.test(d.type),o=d.url.replace(Ot,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(At,"+")):(h=d.url.slice(o.length),d.data&&(d.processData||"string"==typeof d.data)&&(o+=(Tt.test(o)?"&":"?")+d.data,delete d.data),!1===d.cache&&(o=o.replace(jt,"$1"),h=(Tt.test(o)?"&":"?")+"_="+St+++h),d.url=o+h),d.ifModified&&(T.lastModified[o]&&E.setRequestHeader("If-Modified-Since",T.lastModified[o]),T.etag[o]&&E.setRequestHeader("If-None-Match",T.etag[o])),(d.data&&d.hasContent&&!1!==d.contentType||t.contentType)&&E.setRequestHeader("Content-Type",d.contentType),E.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+qt+"; q=0.01":""):d.accepts["*"]),d.headers)E.setRequestHeader(p,d.headers[p]);if(d.beforeSend&&(!1===d.beforeSend.call(m,E,d)||l))return E.abort();if(S="abort",y.add(d.complete),E.done(d.success),E.fail(d.error),r=Wt(Pt,d,t,E)){if(E.readyState=1,f&&g.trigger("ajaxSend",[E,d]),l)return E;d.async&&d.timeout>0&&(c=n.setTimeout(function(){E.abort("timeout")},d.timeout));try{l=!1,r.send(x,C)}catch(e){if(l)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,s,a){var u,p,h,x,w,S=t;l||(l=!0,c&&n.clearTimeout(c),r=void 0,i=a||"",E.readyState=e>0?4:0,u=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var r,o,i,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in a)if(a[o]&&a[o].test(r)){c.unshift(o);break}if(c[0]in n)i=c[0];else{for(o in n){if(!c[0]||e.converters[o+" "+c[0]]){i=o;break}s||(s=o)}i=i||s}if(i)return i!==c[0]&&c.unshift(i),n[i]}(d,E,s)),x=function(e,t,n,r){var o,i,s,a,c,u={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(i=l.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=i,i=l.shift())if("*"===i)i=c;else if("*"!==c&&c!==i){if(!(s=u[c+" "+i]||u["* "+i]))for(o in u)if((a=o.split(" "))[1]===i&&(s=u[c+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[o]:!0!==u[o]&&(i=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+c+" to "+i}}}return{state:"success",data:t}}(d,x,E,u),u?(d.ifModified&&((w=E.getResponseHeader("Last-Modified"))&&(T.lastModified[o]=w),(w=E.getResponseHeader("etag"))&&(T.etag[o]=w)),204===e||"HEAD"===d.type?S="nocontent":304===e?S="notmodified":(S=x.state,p=x.data,u=!(h=x.error))):(h=S,!e&&S||(S="error",e<0&&(e=0))),E.status=e,E.statusText=(t||S)+"",u?v.resolveWith(m,[p,S,E]):v.rejectWith(m,[E,S,h]),E.statusCode(b),b=void 0,f&&g.trigger(u?"ajaxSuccess":"ajaxError",[E,d,u?p:h]),y.fireWith(m,[E,S]),f&&(g.trigger("ajaxComplete",[E,d]),--T.active||T.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],function(e,t){T[t]=function(e,n,r,o){return y(n)&&(o=o||r,r=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:o,data:n,success:r},T.isPlainObject(e)&&e))}}),T._evalUrl=function(e){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){T(this).wrapInner(e.call(this,t))}):this.each(function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){T(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Bt={0:200,1223:204},Ft=T.ajaxSettings.xhr();v.cors=!!Ft&&"withCredentials"in Ft,v.ajax=Ft=!!Ft,T.ajaxTransport(function(e){var t,r;if(v.cors||Ft&&!e.crossDomain)return{send:function(o,i){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);t=function(e){return function(){t&&(t=r=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Bt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),r=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),T.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),T.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,o){t=T("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}});var $t,Vt=[],Gt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||T.expando+"_"+St++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",function(e,t,r){var o,i,s,a=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Gt,"$1"+o):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||T.error(o+" was not called"),s[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){s=arguments},r.always(function(){void 0===i?T(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Vt.push(o)),s&&y(i)&&i(s[0]),s=i=void 0}),"script"}),v.createHTMLDocument=(($t=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===$t.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(r)):t=s),o=j.exec(e),i=!n&&[],o?[t.createElement(o[1])]:(o=we([e],t,i),i&&i.length&&T(i).remove(),T.merge([],o.childNodes)));var r,o,i},T.fn.load=function(e,t,n){var r,o,i,s=this,a=e.indexOf(" ");return a>-1&&(r=mt(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&T.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,s.html(r?T("<div>").append(T.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){T.fn[t]=function(e){return this.on(t,e)}}),T.expr.pseudos.animated=function(e){return T.grep(T.timers,function(t){return e===t.elem}).length},T.offset={setOffset:function(e,t,n){var r,o,i,s,a,c,u=T.css(e,"position"),l=T(e),f={};"static"===u&&(e.style.position="relative"),a=l.offset(),i=T.css(e,"top"),c=T.css(e,"left"),("absolute"===u||"fixed"===u)&&(i+c).indexOf("auto")>-1?(s=(r=l.position()).top,o=r.left):(s=parseFloat(i)||0,o=parseFloat(c)||0),y(t)&&(t=t.call(e,n,T.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+o),"using"in t?t.using.call(e,f):l.css(f)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){T.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===T.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),o.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-T.css(r,"marginTop",!0),left:t.left-o.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||Se})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;T.fn[e]=function(r){return V(this,function(e,r,o){var i;if(b(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),T.each(["top","left"],function(e,t){T.cssHooks[t]=$e(v.pixelPosition,function(e,n){if(n)return n=Fe(e,t),We.test(n)?T(e).position()[t]+"px":n})}),T.each({Height:"height",Width:"width"},function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){T.fn[r]=function(o,i){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===i?"margin":"border");return V(this,function(t,n,o){var i;return b(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?T.css(t,n,a):T.style(t,n,o,a)},t,s?o:void 0,s)}})}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),T.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),T.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=c.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(c.call(arguments)))}).guid=e.guid=e.guid||T.guid++,o},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=O,T.isFunction=y,T.isWindow=b,T.camelCase=X,T.type=S,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return T}.apply(t,[]))||(e.exports=r);var zt=n.jQuery,Jt=n.$;return T.noConflict=function(e){return n.$===T&&(n.$=Jt),e&&n.jQuery===T&&(n.jQuery=zt),T},o||(n.jQuery=n.$=T),T})},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(1),o=n(32);function i(){o.call(this)}r(i,o),i.prototype.removeAllListeners=function(e){e?delete this._listeners[e]:this._listeners={}},i.prototype.once=function(e,t){var n=this,r=!1;this.on(e,function o(){n.removeListener(e,o),r||(r=!0,t.apply(this,arguments))})},i.prototype.emit=function(){var e=arguments[0],t=this._listeners[e];if(t){for(var n=arguments.length,r=new Array(n-1),o=1;o<n;o++)r[o-1]=arguments[o];for(var i=0;i<t.length;i++)t[i].apply(this,r)}},i.prototype.on=i.prototype.addListener=o.prototype.addEventListener,i.prototype.removeListener=o.prototype.removeEventListener,e.exports.EventEmitter=i},function(e,t,n){"use strict";var r=n(33);e.exports={getOrigin:function(e){if(!e)return null;var t=new r(e);if("file:"===t.protocol)return null;var n=t.port;return n||(n="https:"===t.protocol?"443":"80"),t.protocol+"//"+t.hostname+":"+n},isOriginEqual:function(e,t){var n=this.getOrigin(e)===this.getOrigin(t);return n},isSchemeEqual:function(e,t){return e.split(":")[0]===t.split(":")[0]},addPath:function(e,t){var n=e.split("?");return n[0]+t+(n[1]?"?"+n[1]:"")},addQuery:function(e,t){return e+(-1===e.indexOf("?")?"?"+t:"&"+t)}}},function(e,t,n){(function(e,r){var o;/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */(function(){var i=n(58),s={function:!0,object:!0},a=s[typeof t]&&t&&!t.nodeType&&t,c=s[typeof window]&&window||this,u=a&&s[typeof e]&&e&&!e.nodeType&&"object"==typeof r&&r;function l(e,t){e||(e=c.Object()),t||(t=c.Object());var n=e.Number||c.Number,r=e.String||c.String,o=e.Object||c.Object,i=e.Date||c.Date,a=e.SyntaxError||c.SyntaxError,u=e.TypeError||c.TypeError,f=e.Math||c.Math,p=e.JSON||c.JSON;"object"==typeof p&&p&&(t.stringify=p.stringify,t.parse=p.parse);var h,d,m,g=o.prototype,v=g.toString,y=new i(-0xc782b5b800cec);try{y=-109252==y.getUTCFullYear()&&0===y.getUTCMonth()&&1===y.getUTCDate()&&10==y.getUTCHours()&&37==y.getUTCMinutes()&&6==y.getUTCSeconds()&&708==y.getUTCMilliseconds()}catch(e){}function b(e){if(b[e]!==m)return b[e];var o;if("bug-string-char-index"==e)o="a"!="a"[0];else if("json"==e)o=b("json-stringify")&&b("json-parse");else{var s,a='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==e){var c=t.stringify,u="function"==typeof c&&y;if(u){(s=function(){return 1}).toJSON=s;try{u="0"===c(0)&&"0"===c(new n)&&'""'==c(new r)&&c(v)===m&&c(m)===m&&c()===m&&"1"===c(s)&&"[1]"==c([s])&&"[null]"==c([m])&&"null"==c(null)&&"[null,null,null]"==c([m,v,null])&&c({a:[s,!0,!1,null,"\0\b\n\f\r\t"]})==a&&"1"===c(null,s)&&"[\n 1,\n 2\n]"==c([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==c(new i(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==c(new i(864e13))&&'"-000001-01-01T00:00:00.000Z"'==c(new i(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==c(new i(-1))}catch(e){u=!1}}o=u}if("json-parse"==e){var l=t.parse;if("function"==typeof l)try{if(0===l("0")&&!l(!1)){var f=5==(s=l(a)).a.length&&1===s.a[0];if(f){try{f=!l('"\t"')}catch(e){}if(f)try{f=1!==l("01")}catch(e){}if(f)try{f=1!==l("1.")}catch(e){}}}}catch(e){f=!1}o=f}}return b[e]=!!o}if(!b("json")){var x=b("bug-string-char-index");if(!y)var w=f.floor,S=[0,31,59,90,120,151,181,212,243,273,304,334],T=function(e,t){return S[t]+365*(e-1970)+w((e-1969+(t=+(t>1)))/4)-w((e-1901+t)/100)+w((e-1601+t)/400)};if((h=g.hasOwnProperty)||(h=function(e){var t,n={};return(n.__proto__=null,n.__proto__={toString:1},n).toString!=v?h=function(e){var t=this.__proto__,n=e in(this.__proto__=null,this);return this.__proto__=t,n}:(t=n.constructor,h=function(e){var n=(this.constructor||t).prototype;return e in this&&!(e in n&&this[e]===n[e])}),n=null,h.call(this,e)}),d=function(e,t){var n,r,o,i=0;for(o in(n=function(){this.valueOf=0}).prototype.valueOf=0,r=new n)h.call(r,o)&&i++;return n=r=null,i?d=2==i?function(e,t){var n,r={},o="[object Function]"==v.call(e);for(n in e)o&&"prototype"==n||h.call(r,n)||!(r[n]=1)||!h.call(e,n)||t(n)}:function(e,t){var n,r,o="[object Function]"==v.call(e);for(n in e)o&&"prototype"==n||!h.call(e,n)||(r="constructor"===n)||t(n);(r||h.call(e,n="constructor"))&&t(n)}:(r=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],d=function(e,t){var n,o,i="[object Function]"==v.call(e),a=!i&&"function"!=typeof e.constructor&&s[typeof e.hasOwnProperty]&&e.hasOwnProperty||h;for(n in e)i&&"prototype"==n||!a.call(e,n)||t(n);for(o=r.length;n=r[--o];a.call(e,n)&&t(n));}),d(e,t)},!b("json-stringify")){var E={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},C=function(e,t){return("000000"+(t||0)).slice(-e)},_=function(e){for(var t='"',n=0,r=e.length,o=!x||r>10,i=o&&(x?e.split(""):e);n<r;n++){var s=e.charCodeAt(n);switch(s){case 8:case 9:case 10:case 12:case 13:case 34:case 92:t+=E[s];break;default:if(s<32){t+="\\u00"+C(2,s.toString(16));break}t+=o?i[n]:e.charAt(n)}}return t+'"'},k=function(e,t,n,r,o,i,s){var a,c,l,f,p,g,y,b,x,S,E,N,A,O,j,D;try{a=t[e]}catch(e){}if("object"==typeof a&&a)if("[object Date]"!=(c=v.call(a))||h.call(a,"toJSON"))"function"==typeof a.toJSON&&("[object Number]"!=c&&"[object String]"!=c&&"[object Array]"!=c||h.call(a,"toJSON"))&&(a=a.toJSON(e));else if(a>-1/0&&a<1/0){if(T){for(p=w(a/864e5),l=w(p/365.2425)+1970-1;T(l+1,0)<=p;l++);for(f=w((p-T(l,0))/30.42);T(l,f+1)<=p;f++);p=1+p-T(l,f),y=w((g=(a%864e5+864e5)%864e5)/36e5)%24,b=w(g/6e4)%60,x=w(g/1e3)%60,S=g%1e3}else l=a.getUTCFullYear(),f=a.getUTCMonth(),p=a.getUTCDate(),y=a.getUTCHours(),b=a.getUTCMinutes(),x=a.getUTCSeconds(),S=a.getUTCMilliseconds();a=(l<=0||l>=1e4?(l<0?"-":"+")+C(6,l<0?-l:l):C(4,l))+"-"+C(2,f+1)+"-"+C(2,p)+"T"+C(2,y)+":"+C(2,b)+":"+C(2,x)+"."+C(3,S)+"Z"}else a=null;if(n&&(a=n.call(t,e,a)),null===a)return"null";if("[object Boolean]"==(c=v.call(a)))return""+a;if("[object Number]"==c)return a>-1/0&&a<1/0?""+a:"null";if("[object String]"==c)return _(""+a);if("object"==typeof a){for(O=s.length;O--;)if(s[O]===a)throw u();if(s.push(a),E=[],j=i,i+=o,"[object Array]"==c){for(A=0,O=a.length;A<O;A++)N=k(A,a,n,r,o,i,s),E.push(N===m?"null":N);D=E.length?o?"[\n"+i+E.join(",\n"+i)+"\n"+j+"]":"["+E.join(",")+"]":"[]"}else d(r||a,function(e){var t=k(e,a,n,r,o,i,s);t!==m&&E.push(_(e)+":"+(o?" ":"")+t)}),D=E.length?o?"{\n"+i+E.join(",\n"+i)+"\n"+j+"}":"{"+E.join(",")+"}":"{}";return s.pop(),D}};t.stringify=function(e,t,n){var r,o,i,a;if(s[typeof t]&&t)if("[object Function]"==(a=v.call(t)))o=t;else if("[object Array]"==a){i={};for(var c,u=0,l=t.length;u<l;c=t[u++],("[object String]"==(a=v.call(c))||"[object Number]"==a)&&(i[c]=1));}if(n)if("[object Number]"==(a=v.call(n))){if((n-=n%1)>0)for(r="",n>10&&(n=10);r.length<n;r+=" ");}else"[object String]"==a&&(r=n.length<=10?n:n.slice(0,10));return k("",((c={})[""]=e,c),o,i,r,"",[])}}if(!b("json-parse")){var N,A,O=r.fromCharCode,j={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},D=function(){throw N=A=null,a()},I=function(){for(var e,t,n,r,o,i=A,s=i.length;N<s;)switch(o=i.charCodeAt(N)){case 9:case 10:case 13:case 32:N++;break;case 123:case 125:case 91:case 93:case 58:case 44:return e=x?i.charAt(N):i[N],N++,e;case 34:for(e="@",N++;N<s;)if((o=i.charCodeAt(N))<32)D();else if(92==o)switch(o=i.charCodeAt(++N)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:e+=j[o],N++;break;case 117:for(t=++N,n=N+4;N<n;N++)(o=i.charCodeAt(N))>=48&&o<=57||o>=97&&o<=102||o>=65&&o<=70||D();e+=O("0x"+i.slice(t,N));break;default:D()}else{if(34==o)break;for(o=i.charCodeAt(N),t=N;o>=32&&92!=o&&34!=o;)o=i.charCodeAt(++N);e+=i.slice(t,N)}if(34==i.charCodeAt(N))return N++,e;D();default:if(t=N,45==o&&(r=!0,o=i.charCodeAt(++N)),o>=48&&o<=57){for(48==o&&((o=i.charCodeAt(N+1))>=48&&o<=57)&&D(),r=!1;N<s&&((o=i.charCodeAt(N))>=48&&o<=57);N++);if(46==i.charCodeAt(N)){for(n=++N;n<s&&((o=i.charCodeAt(n))>=48&&o<=57);n++);n==N&&D(),N=n}if(101==(o=i.charCodeAt(N))||69==o){for(43!=(o=i.charCodeAt(++N))&&45!=o||N++,n=N;n<s&&((o=i.charCodeAt(n))>=48&&o<=57);n++);n==N&&D(),N=n}return+i.slice(t,N)}if(r&&D(),"true"==i.slice(N,N+4))return N+=4,!0;if("false"==i.slice(N,N+5))return N+=5,!1;if("null"==i.slice(N,N+4))return N+=4,null;D()}return"$"},L=function(e){var t,n;if("$"==e&&D(),"string"==typeof e){if("@"==(x?e.charAt(0):e[0]))return e.slice(1);if("["==e){for(t=[];"]"!=(e=I());n||(n=!0))n&&(","==e?"]"==(e=I())&&D():D()),","==e&&D(),t.push(L(e));return t}if("{"==e){for(t={};"}"!=(e=I());n||(n=!0))n&&(","==e?"}"==(e=I())&&D():D()),","!=e&&"string"==typeof e&&"@"==(x?e.charAt(0):e[0])&&":"==I()||D(),t[e.slice(1)]=L(I());return t}D()}return e},R=function(e,t,n){var r=P(e,t,n);r===m?delete e[t]:e[t]=r},P=function(e,t,n){var r,o=e[t];if("object"==typeof o&&o)if("[object Array]"==v.call(o))for(r=o.length;r--;)R(o,r,n);else d(o,function(e){R(o,e,n)});return n.call(e,t,o)};t.parse=function(e,t){var n,r;return N=0,A=""+e,n=L(I()),"$"!=I()&&D(),N=A=null,t&&"[object Function]"==v.call(t)?P(((r={})[""]=n,r),"",t):n}}}return t.runInContext=l,t}if(!u||u.global!==u&&u.window!==u&&u.self!==u||(c=u),a&&!i)l(c,a);else{var f=c.JSON,p=c.JSON3,h=!1,d=l(c,c.JSON3={noConflict:function(){return h||(h=!0,c.JSON=f,c.JSON3=p,f=p=null),d}});c.JSON={parse:d.parse,stringify:d.stringify}}i&&(void 0===(o=function(){return d}.call(t,n,t,e))||(e.exports=o))}).call(this)}).call(this,n(59)(e),n(2))},function(e,t,n){"use strict";(function(t){var r=n(8),o={},i=!1,s=t.chrome&&t.chrome.app&&t.chrome.app.runtime;e.exports={attachEvent:function(e,n){void 0!==t.addEventListener?t.addEventListener(e,n,!1):t.document&&t.attachEvent&&(t.document.attachEvent("on"+e,n),t.attachEvent("on"+e,n))},detachEvent:function(e,n){void 0!==t.addEventListener?t.removeEventListener(e,n,!1):t.document&&t.detachEvent&&(t.document.detachEvent("on"+e,n),t.detachEvent("on"+e,n))},unloadAdd:function(e){if(s)return null;var t=r.string(8);return o[t]=e,i&&setTimeout(this.triggerUnloadCallbacks,0),t},unloadDel:function(e){e in o&&delete o[e]},triggerUnloadCallbacks:function(){for(var e in o)o[e](),delete o[e]}};s||e.exports.attachEvent("unload",function(){i||(i=!0,e.exports.triggerUnloadCallbacks())})}).call(this,n(2))},function(e,t,n){"use strict";var r=n(1),o=n(4),i=n(31),s=function(){};function a(e,t,n,r){i.call(this,e,t,function(e){return function(t,n,r){s("create ajax sender",t,n);var i={};"string"==typeof n&&(i.headers={"Content-type":"text/plain"});var a=o.addPath(t,"/xhr_send"),c=new e("POST",a,n,i);return c.once("finish",function(e){if(s("finish",e),c=null,200!==e&&204!==e)return r(new Error("http status "+e));r()}),function(){s("abort"),c.close(),c=null;var e=new Error("Aborted");e.code=1e3,r(e)}}}(r),n,r)}r(a,i),e.exports=a},function(e,t,n){"use strict";var r=n(67);e.exports={string:function(e){for(var t="abcdefghijklmnopqrstuvwxyz012345".length,n=r.randomBytes(e),o=[],i=0;i<e;i++)o.push("abcdefghijklmnopqrstuvwxyz012345".substr(n[i]%t,1));return o.join("")},number:function(e){return Math.floor(Math.random()*e)},numberString:function(e){var t=(""+(e-1)).length;return(new Array(t+1).join("0")+this.number(e)).slice(-t)}}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),o=n.n(r);class i{static getPhaseOrder(e){const t=e[0].className,n=t.indexOf("phase-")+6,r=t.indexOf(" ",n);return parseInt(t.slice(n,-1===r?t.length:r))}static getCurrentRoundIndex(){const e=o()(".round.active");return e.length&&parseInt(e.attr("id").substr(6)),0}static getGameSessionId(){const e=window.location.href;return e.substr(e.lastIndexOf("/")+1)}static getGameId(){return parseInt(o()("#game-id").text())}static getPhases(){const e={};return o()(".phase").each((t,n)=>{e[o()(n).find(".english-name").text()]=this.getPhaseOrder(o()(n))}),e}static getPlayerId(){return parseInt(o()("#player-id").text())}}},function(e,t,n){"use strict";(function(t){var r=n(6),o=n(5),i=n(11);e.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){e.exports.WPrefix in t||(t[e.exports.WPrefix]={})},postMessage:function(n,r){t.parent!==t&&t.parent.postMessage(o.stringify({windowId:e.exports.currentWindowId,type:n,data:r||""}),"*")},createIframe:function(e,n){var o,i,s=t.document.createElement("iframe"),a=function(){clearTimeout(o);try{s.onload=null}catch(e){}s.onerror=null},c=function(){s&&(a(),setTimeout(function(){s&&s.parentNode.removeChild(s),s=null},0),r.unloadDel(i))},u=function(e){s&&(c(),n(e))};return s.src=e,s.style.display="none",s.style.position="absolute",s.onerror=function(){u("onerror")},s.onload=function(){clearTimeout(o),o=setTimeout(function(){u("onload timeout")},2e3)},t.document.body.appendChild(s),o=setTimeout(function(){u("timeout")},15e3),i=r.unloadAdd(c),{post:function(e,t){try{setTimeout(function(){s&&s.contentWindow&&s.contentWindow.postMessage(e,t)},0)}catch(e){}},cleanup:c,loaded:a}},createHtmlfile:function(n,o){var i,s,a,c=["Active"].concat("Object").join("X"),u=new t[c]("htmlfile"),l=function(){clearTimeout(i),a.onerror=null},f=function(){u&&(l(),r.unloadDel(s),a.parentNode.removeChild(a),a=u=null,CollectGarbage())},p=function(e){u&&(f(),o(e))};u.open(),u.write('<html><script>document.domain="'+t.document.domain+'";<\/script></html>'),u.close(),u.parentWindow[e.exports.WPrefix]=t[e.exports.WPrefix];var h=u.createElement("div");return u.body.appendChild(h),a=u.createElement("iframe"),h.appendChild(a),a.src=n,a.onerror=function(){p("onerror")},i=setTimeout(function(){p("timeout")},15e3),s=r.unloadAdd(f),{post:function(e,t){try{setTimeout(function(){a&&a.contentWindow&&a.contentWindow.postMessage(e,t)},0)}catch(e){}},cleanup:f,loaded:l}}},e.exports.iframeEnabled=!1,t.document&&(e.exports.iframeEnabled=("function"==typeof t.postMessage||"object"==typeof t.postMessage)&&!i.isKonqueror())}).call(this,n(2))},function(e,t,n){"use strict";(function(t){e.exports={isOpera:function(){return t.navigator&&/opera/i.test(t.navigator.userAgent)},isKonqueror:function(){return t.navigator&&/konqueror/i.test(t.navigator.userAgent)},hasDomain:function(){if(!t.document)return!0;try{return!!t.document.domain}catch(e){return!1}}}}).call(this,n(2))},function(e,t,n){"use strict";var r=n(1),o=n(30);function i(e,t,n){o.call(this,e,t,n,{noCredentials:!0})}r(i,o),i.enabled=o.enabled,e.exports=i},function(e,t,n){"use strict";var r=n(1),o=n(30);function i(e,t,n,r){o.call(this,e,t,n,r)}r(i,o),i.enabled=o.enabled&&o.supportsCORS,e.exports=i},function(e,t,n){"use strict";var r=n(1),o=n(3).EventEmitter,i=function(){};function s(e,t){i(e),o.call(this);var n=this;this.bufferPosition=0,this.xo=new t("POST",e,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",function(e,t){i("finish",e,t),n._chunkHandler(e,t),n.xo=null;var r=200===e?"network":"permanent";i("close",r),n.emit("close",null,r),n._cleanup()})}r(s,o),s.prototype._chunkHandler=function(e,t){if(i("_chunkHandler",e),200===e&&t)for(var n=-1;;this.bufferPosition+=n+1){var r=t.slice(this.bufferPosition);if(-1===(n=r.indexOf("\n")))break;var o=r.slice(0,n);o&&(i("message",o),this.emit("message",o))}},s.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},s.prototype.abort=function(){i("abort"),this.xo&&(this.xo.close(),i("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},e.exports=s},function(e,t,n){"use strict";n.d(t,"a",function(){return r});class r{static convertToTimerString(e,t){return(e=e<10?"0"+e:e)+":"+(t=t<10?"0"+t:t)}static getMinutes(e){return Math.floor(parseInt(e)/60)}static getSeconds(e){return parseInt(e)%60}}},function(e,t,n){"use strict";function r(e){this.type=e}r.prototype.initEvent=function(e,t,n){return this.type=e,this.bubbles=t,this.cancelable=n,this.timeStamp=+new Date,this},r.prototype.stopPropagation=function(){},r.prototype.preventDefault=function(){},r.CAPTURING_PHASE=1,r.AT_TARGET=2,r.BUBBLING_PHASE=3,e.exports=r},function(e,t,n){"use strict";e.exports={isObject:function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},extend:function(e){if(!this.isObject(e))return e;for(var t,n,r=1,o=arguments.length;r<o;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}}},function(e,t,n){"use strict";(function(t){var r=n(1),o=n(26),i=n(17);e.exports=function(e){function n(t,n){o.call(this,e.transportName,t,n)}return r(n,o),n.enabled=function(n,r){if(!t.document)return!1;var s=i.extend({},r);return s.sameOrigin=!0,e.enabled(s)&&o.enabled()},n.transportName="iframe-"+e.transportName,n.needBody=!0,n.roundTrips=o.roundTrips+e.roundTrips-1,n.facadeTransport=e,n}}).call(this,n(2))},function(e,t,n){"use strict";(function(t){var r=n(3).EventEmitter,o=n(1),i=n(6),s=n(11),a=n(4),c=function(){};function u(e,t,n){c(e,t);var o=this;r.call(this),setTimeout(function(){o._start(e,t,n)},0)}o(u,r),u.prototype._start=function(e,n,r){c("_start");var o=this,s=new t.XDomainRequest;n=a.addQuery(n,"t="+ +new Date),s.onerror=function(){c("onerror"),o._error()},s.ontimeout=function(){c("ontimeout"),o._error()},s.onprogress=function(){c("progress",s.responseText),o.emit("chunk",200,s.responseText)},s.onload=function(){c("load"),o.emit("finish",200,s.responseText),o._cleanup(!1)},this.xdr=s,this.unloadRef=i.unloadAdd(function(){o._cleanup(!0)});try{this.xdr.open(e,n),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(r)}catch(e){this._error()}},u.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},u.prototype._cleanup=function(e){if(c("cleanup",e),this.xdr){if(this.removeAllListeners(),i.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,e)try{this.xdr.abort()}catch(e){}this.unloadRef=this.xdr=null}},u.prototype.close=function(){c("close"),this._cleanup(!0)},u.enabled=!(!t.XDomainRequest||!s.hasDomain()),e.exports=u}).call(this,n(2))},function(e,t,n){"use strict";var r=n(3).EventEmitter,o=n(1),i=n(5),s=n(17),a=function(){};function c(e,t){r.call(this);var n=this,o=+new Date;this.xo=new t("GET",e),this.xo.once("finish",function(e,t){var r,c;if(200===e){if(c=+new Date-o,t)try{r=i.parse(t)}catch(e){a("bad json",t)}s.isObject(r)||(r={})}n.emit("finish",r,c),n.removeAllListeners()})}o(c,r),c.prototype.close=function(){this.removeAllListeners(),this.xo.close()},e.exports=c},function(e,t,n){"use strict";var r=n(1),o=n(3).EventEmitter,i=n(5),s=n(12),a=n(20);function c(e){var t=this;o.call(this),this.ir=new a(e,s),this.ir.once("finish",function(e,n){t.ir=null,t.emit("message",i.stringify([e,n]))})}r(c,o),c.transportName="iframe-info-receiver",c.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},e.exports=c},function(e,t,n){"use strict";(function(t){e.exports=t.location||{origin:"http://localhost:80",protocol:"http",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this,n(2))},function(e,t,n){"use strict";var r=n(1),o=n(7),i=n(14),s=n(13),a=n(12);function c(e){if(!a.enabled&&!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr",i,s)}r(c,o),c.enabled=function(e){return!e.nullOrigin&&(!(!a.enabled||!e.sameOrigin)||s.enabled)},c.transportName="xhr-polling",c.roundTrips=2,e.exports=c},function(e,t,n){"use strict";var r=n(1),o=n(57),i=n(12),s=n(7);function a(e){if(!o.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/htmlfile",o,i)}r(a,s),a.enabled=function(e){return o.enabled&&e.sameOrigin},a.transportName="htmlfile",a.roundTrips=2,e.exports=a},function(e,t){e.exports="1.1.4"},function(e,t,n){"use strict";var r=n(1),o=n(5),i=n(3).EventEmitter,s=n(25),a=n(4),c=n(10),u=n(6),l=n(8),f=function(){};function p(e,t,n){if(!p.enabled())throw new Error("Transport created when disabled");i.call(this);var r=this;this.origin=a.getOrigin(n),this.baseUrl=n,this.transUrl=t,this.transport=e,this.windowId=l.string(8);var o=a.addPath(n,"/iframe.html")+"#"+this.windowId;f(e,t,o),this.iframeObj=c.createIframe(o,function(e){f("err callback"),r.emit("close",1006,"Unable to load an iframe ("+e+")"),r.close()}),this.onmessageCallback=this._message.bind(this),u.attachEvent("message",this.onmessageCallback)}r(p,i),p.prototype.close=function(){if(f("close"),this.removeAllListeners(),this.iframeObj){u.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(e){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},p.prototype._message=function(e){if(f("message",e.data),a.isOriginEqual(e.origin,this.origin)){var t;try{t=o.parse(e.data)}catch(t){return void f("bad json",e.data)}if(t.windowId===this.windowId)switch(t.type){case"s":this.iframeObj.loaded(),this.postMessage("s",o.stringify([s,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",t.data);break;case"c":var n;try{n=o.parse(t.data)}catch(e){return void f("bad json",t.data)}this.emit("close",n[0],n[1]),this.close()}else f("mismatched window id",t.windowId,this.windowId)}else f("not same origin",e.origin,this.origin)},p.prototype.postMessage=function(e,t){f("postMessage",e,t),this.iframeObj.post(o.stringify({windowId:this.windowId,type:e,data:t||""}),this.origin)},p.prototype.send=function(e){f("send",e),this.postMessage("m",e)},p.enabled=function(){return c.iframeEnabled},p.transportName="iframe",p.roundTrips=2,e.exports=p},function(e,t,n){(function(t){e.exports=t.EventSource}).call(this,n(2))},function(e,t,n){"use strict";var r=n(1),o=n(7),i=n(60),s=n(13),a=n(27);function c(e){if(!c.enabled())throw new Error("Transport created when disabled");o.call(this,e,"/eventsource",i,s)}r(c,o),c.enabled=function(){return!!a},c.transportName="eventsource",c.roundTrips=2,e.exports=c},function(e,t,n){"use strict";var r=n(1),o=n(7),i=n(14),s=n(19);function a(e){if(!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr_streaming",i,s)}r(a,o),a.enabled=function(e){return!e.cookie_needed&&!e.nullOrigin&&(s.enabled&&e.sameScheme)},a.transportName="xdr-streaming",a.roundTrips=2,e.exports=a},function(e,t,n){"use strict";(function(t){var r=n(3).EventEmitter,o=n(1),i=n(6),s=n(4),a=t.XMLHttpRequest,c=function(){};function u(e,t,n,o){c(e,t);var i=this;r.call(this),setTimeout(function(){i._start(e,t,n,o)},0)}o(u,r),u.prototype._start=function(e,t,n,r){var o=this;try{this.xhr=new a}catch(e){}if(!this.xhr)return c("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();t=s.addQuery(t,"t="+ +new Date),this.unloadRef=i.unloadAdd(function(){c("unload cleanup"),o._cleanup(!0)});try{this.xhr.open(e,t,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){c("xhr timeout"),o.emit("finish",0,""),o._cleanup(!1)})}catch(e){return c("exception",e),this.emit("finish",0,""),void this._cleanup(!1)}if(r&&r.noCredentials||!u.supportsCORS||(c("withCredentials"),this.xhr.withCredentials="true"),r&&r.headers)for(var l in r.headers)this.xhr.setRequestHeader(l,r.headers[l]);this.xhr.onreadystatechange=function(){if(o.xhr){var e,t,n=o.xhr;switch(c("readyState",n.readyState),n.readyState){case 3:try{t=n.status,e=n.responseText}catch(e){}c("status",t),1223===t&&(t=204),200===t&&e&&e.length>0&&(c("chunk"),o.emit("chunk",t,e));break;case 4:t=n.status,c("status",t),1223===t&&(t=204),12005!==t&&12029!==t||(t=0),c("finish",t,n.responseText),o.emit("finish",t,n.responseText),o._cleanup(!1)}}};try{o.xhr.send(n)}catch(e){o.emit("finish",0,""),o._cleanup(!1)}},u.prototype._cleanup=function(e){if(c("cleanup"),this.xhr){if(this.removeAllListeners(),i.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),e)try{this.xhr.abort()}catch(e){}this.unloadRef=this.xhr=null}},u.prototype.close=function(){c("close"),this._cleanup(!0)},u.enabled=!!a;var l=["Active"].concat("Object").join("X");!u.enabled&&l in t&&(c("overriding xmlhttprequest"),a=function(){try{return new t[l]("Microsoft.XMLHTTP")}catch(e){return null}},u.enabled=!!new a);var f=!1;try{f="withCredentials"in new a}catch(e){}u.supportsCORS=f,e.exports=u}).call(this,n(2))},function(e,t,n){"use strict";var r=n(1),o=n(4),i=n(62),s=n(61),a=function(){};function c(e,t,n,r,c){var u=o.addPath(e,t);a(u);var l=this;i.call(this,e,n),this.poll=new s(r,u,c),this.poll.on("message",function(e){a("poll message",e),l.emit("message",e)}),this.poll.once("close",function(e,t){a("poll close",e,t),l.poll=null,l.emit("close",e,t),l.close()})}r(c,i),c.prototype.close=function(){i.prototype.close.call(this),a("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null)},e.exports=c},function(e,t,n){"use strict";function r(){this._listeners={}}r.prototype.addEventListener=function(e,t){e in this._listeners||(this._listeners[e]=[]);var n=this._listeners[e];-1===n.indexOf(t)&&(n=n.concat([t])),this._listeners[e]=n},r.prototype.removeEventListener=function(e,t){var n=this._listeners[e];if(n){var r=n.indexOf(t);-1===r||(n.length>1?this._listeners[e]=n.slice(0,r).concat(n.slice(r+1)):delete this._listeners[e])}},r.prototype.dispatchEvent=function(){var e=arguments[0],t=e.type,n=1===arguments.length?[e]:Array.apply(null,arguments);if(this["on"+t]&&this["on"+t].apply(this,n),t in this._listeners)for(var r=this._listeners[t],o=0;o<r.length;o++)r[o].apply(this,n)},e.exports=r},function(e,t,n){"use strict";(function(t){var r=n(66),o=n(65),i=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,s=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,a=[["#","hash"],["?","query"],["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],c={hash:1,query:1};function u(e){var n,r={},o=typeof(e=e||t.location||{});if("blob:"===e.protocol)r=new f(unescape(e.pathname),{});else if("string"===o)for(n in r=new f(e,{}),c)delete r[n];else if("object"===o){for(n in e)n in c||(r[n]=e[n]);void 0===r.slashes&&(r.slashes=s.test(e.href))}return r}function l(e){var t=i.exec(e);return{protocol:t[1]?t[1].toLowerCase():"",slashes:!!t[2],rest:t[3]}}function f(e,t,n){if(!(this instanceof f))return new f(e,t,n);var i,s,c,p,h,d,m=a.slice(),g=typeof t,v=this,y=0;for("object"!==g&&"string"!==g&&(n=t,t=null),n&&"function"!=typeof n&&(n=o.parse),t=u(t),i=!(s=l(e||"")).protocol&&!s.slashes,v.slashes=s.slashes||i&&t.slashes,v.protocol=s.protocol||t.protocol||"",e=s.rest,s.slashes||(m[2]=[/(.*)/,"pathname"]);y<m.length;y++)c=(p=m[y])[0],d=p[1],c!=c?v[d]=e:"string"==typeof c?~(h=e.indexOf(c))&&("number"==typeof p[2]?(v[d]=e.slice(0,h),e=e.slice(h+p[2])):(v[d]=e.slice(h),e=e.slice(0,h))):(h=c.exec(e))&&(v[d]=h[1],e=e.slice(0,h.index)),v[d]=v[d]||i&&p[3]&&t[d]||"",p[4]&&(v[d]=v[d].toLowerCase());n&&(v.query=n(v.query)),i&&t.slashes&&"/"!==v.pathname.charAt(0)&&(""!==v.pathname||""!==t.pathname)&&(v.pathname=function(e,t){for(var n=(t||"/").split("/").slice(0,-1).concat(e.split("/")),r=n.length,o=n[r-1],i=!1,s=0;r--;)"."===n[r]?n.splice(r,1):".."===n[r]?(n.splice(r,1),s++):s&&(0===r&&(i=!0),n.splice(r,1),s--);return i&&n.unshift(""),"."!==o&&".."!==o||n.push(""),n.join("/")}(v.pathname,t.pathname)),r(v.port,v.protocol)||(v.host=v.hostname,v.port=""),v.username=v.password="",v.auth&&(p=v.auth.split(":"),v.username=p[0]||"",v.password=p[1]||""),v.origin=v.protocol&&v.host&&"file:"!==v.protocol?v.protocol+"//"+v.host:"null",v.href=v.toString()}f.prototype={set:function(e,t,n){var i=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(n||o.parse)(t)),i[e]=t;break;case"port":i[e]=t,r(t,i.protocol)?t&&(i.host=i.hostname+":"+t):(i.host=i.hostname,i[e]="");break;case"hostname":i[e]=t,i.port&&(t+=":"+i.port),i.host=t;break;case"host":i[e]=t,/:\d+$/.test(t)?(t=t.split(":"),i.port=t.pop(),i.hostname=t.join(":")):(i.hostname=t,i.port="");break;case"protocol":i.protocol=t.toLowerCase(),i.slashes=!n;break;case"pathname":case"hash":if(t){var s="pathname"===e?"/":"#";i[e]=t.charAt(0)!==s?s+t:t}else i[e]=t;break;default:i[e]=t}for(var c=0;c<a.length;c++){var u=a[c];u[4]&&(i[u[1]]=i[u[1]].toLowerCase())}return i.origin=i.protocol&&i.host&&"file:"!==i.protocol?i.protocol+"//"+i.host:"null",i.href=i.toString(),i},toString:function(e){e&&"function"==typeof e||(e=o.stringify);var t,n=this,r=n.protocol;r&&":"!==r.charAt(r.length-1)&&(r+=":");var i=r+(n.slashes?"//":"");return n.username&&(i+=n.username,n.password&&(i+=":"+n.password),i+="@"),i+=n.host+n.pathname,(t="object"==typeof n.query?e(n.query):n.query)&&(i+="?"!==t.charAt(0)?"?"+t:t),n.hash&&(i+=n.hash),i}},f.extractProtocol=l,f.location=u,f.qs=o,e.exports=f}).call(this,n(2))},function(e,t,n){var r=n(40);e.exports=r.Stomp,e.exports.over=r.Stomp.over,e.exports.client=r.Stomp.client,"function"!=typeof WebSocket&&(r.Stomp.WebSocketClass=n(39).w3cwebsocket)},function(e,t,n){"use strict";(function(t){var r=n(69);e.exports=n(52)(r),"_sockjs_onload"in t&&setTimeout(t._sockjs_onload,1)}).call(this,n(2))},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(35),o=n.n(r),i=n(34);class s{constructor(e,t){this.gamePath="/app/"+t+"/"+e+"/";const n=new o.a("/websocket");this.stompClient=i.over(n)}send(e,t){this.stompClient.send(e,{},t)}sendToApp(e,t){this.stompClient.send(this.gamePath+e,{},t)}subscribe(e,t){this.stompClient.subscribe(e,t)}connect(e){this.stompClient.connect({},e,()=>void location.reload())}}},function(e){e.exports={_from:"websocket@^1.0.24",_id:"websocket@1.0.25",_inBundle:!1,_integrity:"sha512-M58njvi6ZxVb5k7kpnHh2BvNKuBWiwIYvsToErBzWhvBZYwlEiLcyLrG41T1jRcrY9ettqPYEqduLI7ul54CVQ==",_location:"/websocket",_phantomChildren:{},_requested:{type:"range",registry:!0,raw:"websocket@^1.0.24",name:"websocket",escapedName:"websocket",rawSpec:"^1.0.24",saveSpec:null,fetchSpec:"^1.0.24"},_requiredBy:["/@stomp/stompjs"],_resolved:"https://registry.npmjs.org/websocket/-/websocket-1.0.25.tgz",_shasum:"998ec790f0a3eacb8b08b50a4350026692a11958",_spec:"websocket@^1.0.24",_where:"/Users/andreyserebryanskiy/IdeaProjects/brief/client/node_modules/@stomp/stompjs",author:{name:"Brian McKelvey",email:"brian@worlize.com",url:"https://www.worlize.com/"},browser:"lib/browser.js",bugs:{url:"https://github.com/theturtle32/WebSocket-Node/issues"},bundleDependencies:!1,config:{verbose:!1},contributors:[{name:"IÃ±aki Baz Castillo",email:"ibc@aliax.net",url:"http://dev.sipdoc.net"}],dependencies:{debug:"^2.2.0",nan:"^2.3.3","typedarray-to-buffer":"^3.1.2",yaeti:"^0.0.6"},deprecated:!1,description:"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",devDependencies:{"buffer-equal":"^1.0.0",faucet:"^0.0.1",gulp:"git+https://github.com/gulpjs/gulp.git#4.0","gulp-jshint":"^2.0.4",jshint:"^2.0.0","jshint-stylish":"^2.2.1",tape:"^4.0.1"},directories:{lib:"./lib"},engines:{node:">=0.10.0"},homepage:"https://github.com/theturtle32/WebSocket-Node",keywords:["websocket","websockets","socket","networking","comet","push","RFC-6455","realtime","server","client"],license:"Apache-2.0",main:"index",name:"websocket",repository:{type:"git",url:"git+https://github.com/theturtle32/WebSocket-Node.git"},scripts:{gulp:"gulp",install:"(node-gyp rebuild 2> builderror.log) || (exit 0)",test:"faucet test/unit"},version:"1.0.25"}},function(e,t,n){e.exports=n(37).version},function(e,t,n){var r=function(){return this}(),o=r.WebSocket||r.MozWebSocket,i=n(38);function s(e,t){return t?new o(e,t):new o(e)}o&&["CONNECTING","OPEN","CLOSING","CLOSED"].forEach(function(e){Object.defineProperty(s,e,{get:function(){return o[e]}})}),e.exports={w3cwebsocket:o?s:null,version:i}},function(e,t){(function(){var e,n,r,o,i={}.hasOwnProperty,s=[].slice;e={LF:"\n",NULL:"\0"},r=function(){var t;function n(e,t,n,r){this.command=e,this.headers=null!=t?t:{},this.body=null!=n?n:"",this.escapeHeaderValues=null!=r&&r}return n.prototype.toString=function(){var t,r,o,s,a;for(r in t=[this.command],(s=!1===this.headers["content-length"])&&delete this.headers["content-length"],o=this.headers)i.call(o,r)&&(a=o[r],this.escapeHeaderValues&&"CONNECT"!==this.command&&"CONNECTED"!==this.command?t.push(r+":"+n.frEscape(a)):t.push(r+":"+a));return this.body&&!s&&t.push("content-length:"+n.sizeOfUTF8(this.body)),t.push(e.LF+this.body),t.join(e.LF)},n.sizeOfUTF8=function(e){return e?encodeURI(e).match(/%..|./g).length:0},t=function(t,r){var o,i,s,a,c,u,l,f,p,h,d,m,g,v,y,b,x,w;for(null==r&&(r=!1),a=t.search(RegExp(""+e.LF+e.LF)),s=(c=t.substring(0,a).split(e.LF)).shift(),u={},w=function(e){return e.replace(/^\s+|\s+$/g,"")},p=0,m=(v=c.reverse()).length;p<m;p++)f=(g=v[p]).indexOf(":"),u[w(g.substring(0,f))]=r&&"CONNECT"!==s&&"CONNECTED"!==s?n.frUnEscape(w(g.substring(f+1))):w(g.substring(f+1));if(o="",x=a+2,u["content-length"])d=parseInt(u["content-length"]),o=(""+t).substring(x,x+d);else for(i=null,l=h=y=x,b=t.length;(y<=b?h<b:h>b)&&(i=t.charAt(l))!==e.NULL;l=y<=b?++h:--h)o+=i;return new n(s,u,o,r)},n.unmarshall=function(n,r){var o,i,s,a;return null==r&&(r=!1),i=n.split(RegExp(""+e.NULL+e.LF+"*")),(a={frames:[],partial:""}).frames=function(){var e,n,s,a;for(a=[],e=0,n=(s=i.slice(0,-1)).length;e<n;e++)o=s[e],a.push(t(o,r));return a}(),(s=i.slice(-1)[0])===e.LF||-1!==s.search(RegExp(""+e.NULL+e.LF+"*$"))?a.frames.push(t(s,r)):a.partial=s,a},n.marshall=function(t,r,o,i){return new n(t,r,o,i).toString()+e.NULL},n.frEscape=function(e){return(""+e).replace(/\\/g,"\\\\").replace(/\r/g,"\\r").replace(/\n/g,"\\n").replace(/:/g,"\\c")},n.frUnEscape=function(e){return(""+e).replace(/\\r/g,"\r").replace(/\\n/g,"\n").replace(/\\c/g,":").replace(/\\\\/g,"\\")},n}(),n=function(){var t;function n(e){this.ws_fn=function(){var t;return(t=e()).binaryType="arraybuffer",t},this.reconnect_delay=0,this.counter=0,this.connected=!1,this.heartbeat={outgoing:1e4,incoming:1e4},this.maxWebSocketFrameSize=16384,this.subscriptions={},this.partialData=""}return n.prototype.debug=function(e){var t;return"undefined"!=typeof window&&null!==window&&null!=(t=window.console)?t.log(e):void 0},t=function(){return Date.now?Date.now():(new Date).valueOf},n.prototype._transmit=function(e,t,n){var o;for(o=r.marshall(e,t,n,this.escapeHeaderValues),"function"==typeof this.debug&&this.debug(">>> "+o);;){if(!(o.length>this.maxWebSocketFrameSize))return this.ws.send(o);this.ws.send(o.substring(0,this.maxWebSocketFrameSize)),o=o.substring(this.maxWebSocketFrameSize),"function"==typeof this.debug&&this.debug("remaining = "+o.length)}},n.prototype._setupHeartbeat=function(n){var r,i,s,a,c,u,l;if((r=n.version)===o.VERSIONS.V1_1||r===o.VERSIONS.V1_2)return a=(i=function(){var e,t,r,o;for(o=[],e=0,t=(r=n["heart-beat"].split(",")).length;e<t;e++)u=r[e],o.push(parseInt(u));return o}())[0],s=i[1],0!==this.heartbeat.outgoing&&0!==s&&(c=Math.max(this.heartbeat.outgoing,s),"function"==typeof this.debug&&this.debug("send PING every "+c+"ms"),this.pinger=o.setInterval(c,(l=this,function(){return l.ws.send(e.LF),"function"==typeof l.debug?l.debug(">>> PING"):void 0}))),0!==this.heartbeat.incoming&&0!==a?(c=Math.max(this.heartbeat.incoming,a),"function"==typeof this.debug&&this.debug("check PONG every "+c+"ms"),this.ponger=o.setInterval(c,function(e){return function(){var n;if((n=t()-e.serverActivity)>2*c)return"function"==typeof e.debug&&e.debug("did not receive server activity for the last "+n+"ms"),e.ws.close()}}(this))):void 0},n.prototype._parseConnect=function(){var e,t,n,r,o;if(o={},(e=1<=arguments.length?s.call(arguments,0):[]).length<2)throw"Connect requires at least 2 arguments";if(e[1]instanceof Function)o=e[0],n=e[1],r=e[2],t=e[3];else switch(e.length){case 6:o.login=e[0],o.passcode=e[1],n=e[2],r=e[3],t=e[4],o.host=e[5];break;default:o.login=e[0],o.passcode=e[1],n=e[2],r=e[3],t=e[4]}return[o,n,r,t]},n.prototype.connect=function(){var e,t;return e=1<=arguments.length?s.call(arguments,0):[],this.escapeHeaderValues=!1,t=this._parseConnect.apply(this,e),this.headers=t[0],this.connectCallback=t[1],this.errorCallback=t[2],this.closeEventCallback=t[3],this._active=!0,this._connect()},n.prototype._connect=function(){var n,i,s,a;return s=this.headers,i=this.errorCallback,n=this.closeEventCallback,"function"==typeof this.debug&&this.debug("Opening Web Socket..."),this.ws=this.ws_fn(),this.ws.onmessage=(a=this,function(n){var s,c,u,l,f,p,h,d,m,g,v,y;if(l="undefined"!=typeof ArrayBuffer&&n.data instanceof ArrayBuffer?(s=new Uint8Array(n.data),"function"==typeof a.debug&&a.debug("--- got data length: "+s.length),function(){var e,t,n;for(n=[],e=0,t=s.length;e<t;e++)c=s[e],n.push(String.fromCharCode(c));return n}().join("")):n.data,a.serverActivity=t(),l!==e.LF)for("function"==typeof a.debug&&a.debug("<<< "+l),y=r.unmarshall(a.partialData+l,a.escapeHeaderValues),a.partialData=y.partial,p=0,h=(g=y.frames).length;p<h;p++)switch((f=g[p]).command){case"CONNECTED":if("function"==typeof a.debug&&a.debug("connected to server "+f.headers.server),a.connected=!0,a.version=f.headers.version,a.version===o.VERSIONS.V1_2&&(a.escapeHeaderValues=!0),!a._active)return void a.disconnect();a._setupHeartbeat(f.headers),"function"==typeof a.connectCallback&&a.connectCallback(f);break;case"MESSAGE":v=f.headers.subscription,(m=a.subscriptions[v]||a.onreceive)?(u=a,d=a.version===o.VERSIONS.V1_2?f.headers.ack:f.headers["message-id"],f.ack=function(e){return null==e&&(e={}),u.ack(d,v,e)},f.nack=function(e){return null==e&&(e={}),u.nack(d,v,e)},m(f)):"function"==typeof a.debug&&a.debug("Unhandled received MESSAGE: "+f);break;case"RECEIPT":f.headers["receipt-id"]===a.closeReceipt?(a.ws.onclose=null,a.ws.close(),a._cleanUp(),"function"==typeof a._disconnectCallback&&a._disconnectCallback()):"function"==typeof a.onreceipt&&a.onreceipt(f);break;case"ERROR":"function"==typeof i&&i(f);break;default:"function"==typeof a.debug&&a.debug("Unhandled frame: "+f)}else"function"==typeof a.debug&&a.debug("<<< PONG")}),this.ws.onclose=function(e){return function(t){var r;return r="Whoops! Lost connection to "+e.ws.url,"function"==typeof e.debug&&e.debug(r),"function"==typeof n&&n(t),e._cleanUp(),"function"==typeof i&&i(r),e._schedule_reconnect()}}(this),this.ws.onopen=function(e){return function(){return"function"==typeof e.debug&&e.debug("Web Socket Opened..."),s["accept-version"]=o.VERSIONS.supportedVersions(),s["heart-beat"]=[e.heartbeat.outgoing,e.heartbeat.incoming].join(","),e._transmit("CONNECT",s)}}(this)},n.prototype._schedule_reconnect=function(){if(this.reconnect_delay>0)return"function"==typeof this.debug&&this.debug("STOMP: scheduling reconnection in "+this.reconnect_delay+"ms"),this._reconnector=setTimeout((e=this,function(){return e.connected?"function"==typeof e.debug?e.debug("STOMP: already connected"):void 0:("function"==typeof e.debug&&e.debug("STOMP: attempting to reconnect"),e._connect())}),this.reconnect_delay);var e},n.prototype.disconnect=function(e,t){var n;if(null==t&&(t={}),this._disconnectCallback=e,this._active=!1,this.connected){t.receipt||(t.receipt="close-"+this.counter++),this.closeReceipt=t.receipt;try{return this._transmit("DISCONNECT",t)}catch(e){return n=e,"function"==typeof this.debug?this.debug("Ignoring error during disconnect",n):void 0}}},n.prototype._cleanUp=function(){if(this._reconnector&&clearTimeout(this._reconnector),this.connected=!1,this.subscriptions={},this.partial="",this.pinger&&o.clearInterval(this.pinger),this.ponger)return o.clearInterval(this.ponger)},n.prototype.send=function(e,t,n){return null==t&&(t={}),null==n&&(n=""),t.destination=e,this._transmit("SEND",t,n)},n.prototype.subscribe=function(e,t,n){var r;return null==n&&(n={}),n.id||(n.id="sub-"+this.counter++),n.destination=e,this.subscriptions[n.id]=t,this._transmit("SUBSCRIBE",n),r=this,{id:n.id,unsubscribe:function(e){return r.unsubscribe(n.id,e)}}},n.prototype.unsubscribe=function(e,t){return null==t&&(t={}),delete this.subscriptions[e],t.id=e,this._transmit("UNSUBSCRIBE",t)},n.prototype.begin=function(e){var t,n;return n=e||"tx-"+this.counter++,this._transmit("BEGIN",{transaction:n}),t=this,{id:n,commit:function(){return t.commit(n)},abort:function(){return t.abort(n)}}},n.prototype.commit=function(e){return this._transmit("COMMIT",{transaction:e})},n.prototype.abort=function(e){return this._transmit("ABORT",{transaction:e})},n.prototype.ack=function(e,t,n){return null==n&&(n={}),this.version===o.VERSIONS.V1_2?n.id=e:n["message-id"]=e,n.subscription=t,this._transmit("ACK",n)},n.prototype.nack=function(e,t,n){return null==n&&(n={}),this.version===o.VERSIONS.V1_2?n.id=e:n["message-id"]=e,n.subscription=t,this._transmit("NACK",n)},n}(),(o={VERSIONS:{V1_0:"1.0",V1_1:"1.1",V1_2:"1.2",supportedVersions:function(){return"1.2,1.1,1.0"}},client:function(e,t){return null==t&&(t=["v10.stomp","v11.stomp","v12.stomp"]),new n(function(){return new(o.WebSocketClass||WebSocket)(e,t)})},over:function(e){return new n("function"==typeof e?e:function(){return e})},Frame:r}).setInterval=function(e,t){return setInterval(t,e)},o.clearInterval=function(e){return clearInterval(e)},void 0!==t&&null!==t&&(t.Stomp=o),"undefined"!=typeof window&&null!==window?window.Stomp=o:t||(self.Stomp=o)}).call(this)},function(e,t,n){"use strict";var r=n(5),o=n(10);function i(e){this._transport=e,e.on("message",this._transportMessage.bind(this)),e.on("close",this._transportClose.bind(this))}i.prototype._transportClose=function(e,t){o.postMessage("c",r.stringify([e,t]))},i.prototype._transportMessage=function(e){o.postMessage("t",e)},i.prototype._send=function(e){this._transport.send(e)},i.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},e.exports=i},function(e,t,n){"use strict";var r=n(4),o=n(6),i=n(5),s=n(41),a=n(21),c=n(10),u=n(22);e.exports=function(e,t){var n,l={};t.forEach(function(e){e.facadeTransport&&(l[e.facadeTransport.transportName]=e.facadeTransport)}),l[a.transportName]=a,e.bootstrap_iframe=function(){var t;c.currentWindowId=u.hash.slice(1);o.attachEvent("message",function(o){if(o.source===parent&&(void 0===n&&(n=o.origin),o.origin===n)){var a;try{a=i.parse(o.data)}catch(e){return void o.data}if(a.windowId===c.currentWindowId)switch(a.type){case"s":var f;try{f=i.parse(a.data)}catch(e){a.data;break}var p=f[0],h=f[1],d=f[2],m=f[3];if(p!==e.version)throw new Error('Incompatible SockJS! Main site uses: "'+p+'", the iframe: "'+e.version+'".');if(!r.isOriginEqual(d,u.href)||!r.isOriginEqual(m,u.href))throw new Error("Can't connect to different domain from within an iframe. ("+u.href+", "+d+", "+m+")");t=new s(new l[h](d,m));break;case"m":t._send(a.data);break;case"c":t&&t._close(),t=null}}}),c.postMessage("s")}}},function(e,t,n){"use strict";(function(t){var r=n(3).EventEmitter,o=n(1),i=n(5),s=n(6),a=n(26),c=n(21),u=function(){};function l(e,n){var o=this;r.call(this);var l=function(){var t=o.ifr=new a(c.transportName,n,e);t.once("message",function(e){if(e){var t;try{t=i.parse(e)}catch(t){return u("bad json",e),o.emit("finish"),void o.close()}var n=t[0],r=t[1];o.emit("finish",n,r)}o.close()}),t.once("close",function(){o.emit("finish"),o.close()})};t.document.body?l():s.attachEvent("load",l)}o(l,r),l.enabled=function(){return a.enabled()},l.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},e.exports=l}).call(this,n(2))},function(e,t,n){"use strict";var r=n(3).EventEmitter;function o(){var e=this;r.call(this),this.to=setTimeout(function(){e.emit("finish",200,"{}")},o.timeout)}n(1)(o,r),o.prototype.close=function(){clearTimeout(this.to)},o.timeout=2e3,e.exports=o},function(e,t,n){"use strict";var r=n(3).EventEmitter,o=n(1),i=n(4),s=n(19),a=n(13),c=n(12),u=n(44),l=n(43),f=n(20),p=function(){};function h(e,t){p(e);var n=this;r.call(this),setTimeout(function(){n.doXhr(e,t)},0)}o(h,r),h._getReceiver=function(e,t,n){return n.sameOrigin?new f(t,c):a.enabled?new f(t,a):s.enabled&&n.sameScheme?new f(t,s):l.enabled()?new l(e,t):new f(t,u)},h.prototype.doXhr=function(e,t){var n=this,r=i.addPath(e,"/info");p("doXhr",r),this.xo=h._getReceiver(e,r,t),this.timeoutRef=setTimeout(function(){p("timeout"),n._cleanup(!1),n.emit("finish")},h.timeout),this.xo.once("finish",function(e,t){p("finish",e,t),n._cleanup(!0),n.emit("finish",e,t)})},h.prototype._cleanup=function(e){p("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!e&&this.xo&&this.xo.close(),this.xo=null},h.prototype.close=function(){p("close"),this.removeAllListeners(),this._cleanup(!1)},h.timeout=8e3,e.exports=h},function(e,t,n){"use strict";var r=n(1),o=n(16);function i(e){o.call(this),this.initEvent("message",!1,!1),this.data=e}r(i,o),e.exports=i},function(e,t,n){"use strict";var r=n(1),o=n(16);function i(){o.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}r(i,o),e.exports=i},function(e,t,n){"use strict";(function(t){var n={};["log","debug","warn"].forEach(function(e){var r;try{r=t.console&&t.console[e]&&t.console[e].apply}catch(e){}n[e]=r?function(){return t.console[e].apply(t.console,arguments)}:"log"===e?function(){}:n.log}),e.exports=n}).call(this,n(2))},function(e,t,n){"use strict";e.exports=function(e){return{filterToEnabled:function(t,n){var r={main:[],facade:[]};return t?"string"==typeof t&&(t=[t]):t=[],e.forEach(function(e){e&&("websocket"===e.transportName&&!1===n.websocket||(t.length&&-1===t.indexOf(e.transportName)?e.transportName:e.enabled(n)?(e.transportName,r.main.push(e),e.facadeTransport&&r.facade.push(e.facadeTransport)):e.transportName))}),r}}}},function(e,t,n){"use strict";var r,o=n(5),i=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g;e.exports={quote:function(e){var t=o.stringify(e);return i.lastIndex=0,i.test(t)?(r||(r=function(e){var t,n={},r=[];for(t=0;t<65536;t++)r.push(String.fromCharCode(t));return e.lastIndex=0,r.join("").replace(e,function(e){return n[e]="\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4),""}),e.lastIndex=0,n}(i)),t.replace(i,function(e){return r[e]})):t}}},function(e,t,n){"use strict";var r,o=Array.prototype,i=Object.prototype,s=Function.prototype,a=String.prototype,c=o.slice,u=i.toString,l=function(e){return"[object Function]"===i.toString.call(e)},f=function(e){return"[object String]"===u.call(e)},p=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(e){return!1}}();r=p?function(e,t,n,r){!r&&t in e||Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:!0,value:n})}:function(e,t,n,r){!r&&t in e||(e[t]=n)};var h=function(e,t,n){for(var o in t)i.hasOwnProperty.call(t,o)&&r(e,o,t[o],n)},d=function(e){if(null==e)throw new TypeError("can't convert "+e+" to object");return Object(e)};function m(){}h(s,{bind:function(e){var t=this;if(!l(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var n=c.call(arguments,1),r=Math.max(0,t.length-n.length),o=[],i=0;i<r;i++)o.push("$"+i);var s=Function("binder","return function ("+o.join(",")+"){ return binder.apply(this, arguments); }")(function(){if(this instanceof s){var r=t.apply(this,n.concat(c.call(arguments)));return Object(r)===r?r:this}return t.apply(e,n.concat(c.call(arguments)))});return t.prototype&&(m.prototype=t.prototype,s.prototype=new m,m.prototype=null),s}}),h(Array,{isArray:function(e){return"[object Array]"===u.call(e)}});var g,v,y,b=Object("a"),x="a"!==b[0]||!(0 in b);h(o,{forEach:function(e){var t=d(this),n=x&&f(this)?this.split(""):t,r=arguments[1],o=-1,i=n.length>>>0;if(!l(e))throw new TypeError;for(;++o<i;)o in n&&e.call(r,n[o],o,t)}},(g=o.forEach,v=!0,y=!0,g&&(g.call("foo",function(e,t,n){"object"!=typeof n&&(v=!1)}),g.call([1],function(){y="string"==typeof this},"x")),!(g&&v&&y)));var w=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);h(o,{indexOf:function(e){var t=x&&f(this)?this.split(""):d(this),n=t.length>>>0;if(!n)return-1;var r,o,i=0;for(arguments.length>1&&(r=arguments[1],(o=+r)!=o?o=0:0!==o&&o!==1/0&&o!==-1/0&&(o=(o>0||-1)*Math.floor(Math.abs(o))),i=o),i=i>=0?i:Math.max(0,n+i);i<n;i++)if(i in t&&t[i]===e)return i;return-1}},w);var S,T=a.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(S=void 0===/()??/.exec("")[1],a.split=function(e,t){var n=this;if(void 0===e&&0===t)return[];if("[object RegExp]"!==u.call(e))return T.call(this,e,t);var r,i,s,a,c=[],l=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.extended?"x":"")+(e.sticky?"y":""),f=0;for(e=new RegExp(e.source,l+"g"),n+="",S||(r=new RegExp("^"+e.source+"$(?!\\s)",l)),t=void 0===t?-1>>>0:t>>>0;(i=e.exec(n))&&!((s=i.index+i[0].length)>f&&(c.push(n.slice(f,i.index)),!S&&i.length>1&&i[0].replace(r,function(){for(var e=1;e<arguments.length-2;e++)void 0===arguments[e]&&(i[e]=void 0)}),i.length>1&&i.index<n.length&&o.push.apply(c,i.slice(1)),a=i[0].length,f=s,c.length>=t));)e.lastIndex===i.index&&e.lastIndex++;return f===n.length?!a&&e.test("")||c.push(""):c.push(n.slice(f)),c.length>t?c.slice(0,t):c}):"0".split(void 0,0).length&&(a.split=function(e,t){return void 0===e&&0===t?[]:T.call(this,e,t)});var E=a.substr,C="".substr&&"b"!=="0b".substr(-1);h(a,{substr:function(e,t){return E.call(this,e<0&&(e=this.length+e)<0?0:e,t)}},C)},function(e,t,n){"use strict";(function(t){n(51);var r,o=n(33),i=n(1),s=n(5),a=n(8),c=n(50),u=n(4),l=n(6),f=n(49),p=n(17),h=n(11),d=n(48),m=n(16),g=n(32),v=n(22),y=n(47),b=n(46),x=n(45),w=function(){};function S(e,t,n){if(!(this instanceof S))return new S(e,t,n);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");g.call(this),this.readyState=S.CONNECTING,this.extensions="",this.protocol="",(n=n||{}).protocols_whitelist&&d.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=n.transports,this._transportOptions=n.transportOptions||{};var r=n.sessionId||8;if("function"==typeof r)this._generateSessionId=r;else{if("number"!=typeof r)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return a.string(r)}}this._server=n.server||a.numberString(1e3);var i=new o(e);if(!i.host||!i.protocol)throw new SyntaxError("The URL '"+e+"' is invalid");if(i.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==i.protocol&&"https:"!==i.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+i.protocol+"' is not allowed.");var s="https:"===i.protocol;if("https"===v.protocol&&!s)throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");t?Array.isArray(t)||(t=[t]):t=[];var c=t.sort();c.forEach(function(e,t){if(!e)throw new SyntaxError("The protocols entry '"+e+"' is invalid.");if(t<c.length-1&&e===c[t+1])throw new SyntaxError("The protocols entry '"+e+"' is duplicated.")});var l=u.getOrigin(v.href);this._origin=l?l.toLowerCase():null,i.set("pathname",i.pathname.replace(/\/+$/,"")),this.url=i.href,w("using url",this.url),this._urlInfo={nullOrigin:!h.hasDomain(),sameOrigin:u.isOriginEqual(this.url,v.href),sameScheme:u.isSchemeEqual(this.url,v.href)},this._ir=new x(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function T(e){return 1e3===e||e>=3e3&&e<=4999}i(S,g),S.prototype.close=function(e,t){if(e&&!T(e))throw new Error("InvalidAccessError: Invalid code");if(t&&t.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==S.CLOSING&&this.readyState!==S.CLOSED){this._close(e||1e3,t||"Normal closure",!0)}},S.prototype.send=function(e){if("string"!=typeof e&&(e=""+e),this.readyState===S.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===S.OPEN&&this._transport.send(c.quote(e))},S.version=n(25),S.CONNECTING=0,S.OPEN=1,S.CLOSING=2,S.CLOSED=3,S.prototype._receiveInfo=function(e,t){if(w("_receiveInfo",t),this._ir=null,e){this._rto=this.countRTO(t),this._transUrl=e.base_url?e.base_url:this.url,e=p.extend(e,this._urlInfo),w("info",e);var n=r.filterToEnabled(this._transportsWhitelist,e);this._transports=n.main,w(this._transports.length+" enabled transports"),this._connect()}else this._close(1002,"Cannot connect to server")},S.prototype._connect=function(){for(var e=this._transports.shift();e;e=this._transports.shift()){if(w("attempt",e.transportName),e.needBody&&(!t.document.body||void 0!==t.document.readyState&&"complete"!==t.document.readyState&&"interactive"!==t.document.readyState))return w("waiting for body"),this._transports.unshift(e),void l.attachEvent("load",this._connect.bind(this));var n=this._rto*e.roundTrips||5e3;this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),n),w("using timeout",n);var r=u.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),o=this._transportOptions[e.transportName];w("transport url",r);var i=new e(r,this._transUrl,o);return i.on("message",this._transportMessage.bind(this)),i.once("close",this._transportClose.bind(this)),i.transportName=e.transportName,void(this._transport=i)}this._close(2e3,"All transports failed",!1)},S.prototype._transportTimeout=function(){w("_transportTimeout"),this.readyState===S.CONNECTING&&this._transportClose(2007,"Transport timed out")},S.prototype._transportMessage=function(e){w("_transportMessage",e);var t,n=this,r=e.slice(0,1),o=e.slice(1);switch(r){case"o":return void this._open();case"h":return this.dispatchEvent(new m("heartbeat")),void w("heartbeat",this.transport)}if(o)try{t=s.parse(o)}catch(e){w("bad json",o)}if(void 0!==t)switch(r){case"a":Array.isArray(t)&&t.forEach(function(e){w("message",n.transport,e),n.dispatchEvent(new b(e))});break;case"m":w("message",this.transport,t),this.dispatchEvent(new b(t));break;case"c":Array.isArray(t)&&2===t.length&&this._close(t[0],t[1],!0)}else w("empty payload",o)},S.prototype._transportClose=function(e,t){w("_transportClose",this.transport,e,t),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),T(e)||2e3===e||this.readyState!==S.CONNECTING?this._close(e,t):this._connect()},S.prototype._open=function(){w("_open",this._transport.transportName,this.readyState),this.readyState===S.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=S.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new m("open")),w("connected",this.transport)):this._close(1006,"Server lost session")},S.prototype._close=function(e,t,n){w("_close",this.transport,e,t,n,this.readyState);var r=!1;if(this._ir&&(r=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===S.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=S.CLOSING,setTimeout(function(){this.readyState=S.CLOSED,r&&this.dispatchEvent(new m("error"));var o=new y("close");o.wasClean=n||!1,o.code=e||1e3,o.reason=t,this.dispatchEvent(o),this.onmessage=this.onclose=this.onerror=null,w("disconnected")}.bind(this),0)},S.prototype.countRTO=function(e){return e>100?4*e:300+e},e.exports=function(e){return r=f(e),n(42)(S,e),S}}).call(this,n(2))},function(e,t,n){"use strict";(function(t){var r,o,i=n(8),s=n(4),a=function(){};e.exports=function(e,n,c){a(e,n),r||(a("createForm"),(r=t.document.createElement("form")).style.display="none",r.style.position="absolute",r.method="POST",r.enctype="application/x-www-form-urlencoded",r.acceptCharset="UTF-8",(o=t.document.createElement("textarea")).name="d",r.appendChild(o),t.document.body.appendChild(r));var u="a"+i.string(8);r.target=u,r.action=s.addQuery(s.addPath(e,"/jsonp_send"),"i="+u);var l=function(e){a("createIframe",e);try{return t.document.createElement('<iframe name="'+e+'">')}catch(r){var n=t.document.createElement("iframe");return n.name=e,n}}(u);l.id=u,l.style.display="none",r.appendChild(l);try{o.value=n}catch(e){}r.submit();var f=function(e){a("completed",u,e),l.onerror&&(l.onreadystatechange=l.onerror=l.onload=null,setTimeout(function(){a("cleaning up",u),l.parentNode.removeChild(l),l=null},500),o.value="",c(e))};return l.onerror=function(){a("onerror",u),f()},l.onload=function(){a("onload",u),f()},l.onreadystatechange=function(e){a("onreadystatechange",u,l.readyState,e),"complete"===l.readyState&&f()},function(){a("aborted",u),f(new Error("Aborted"))}}}).call(this,n(2))},function(e,t,n){"use strict";(function(t){var r=n(10),o=n(8),i=n(11),s=n(4),a=n(1),c=n(3).EventEmitter,u=function(){};function l(e){u(e);var n=this;c.call(this),r.polluteGlobalNamespace(),this.id="a"+o.string(6);var i=s.addQuery(e,"c="+encodeURIComponent(r.WPrefix+"."+this.id));t[r.WPrefix][this.id]=this._callback.bind(this),this._createScript(i),this.timeoutId=setTimeout(function(){u("timeout"),n._abort(new Error("JSONP script loaded abnormally (timeout)"))},l.timeout)}a(l,c),l.prototype.abort=function(){if(u("abort"),t[r.WPrefix][this.id]){var e=new Error("JSONP user aborted read");e.code=1e3,this._abort(e)}},l.timeout=35e3,l.scriptErrorTimeout=1e3,l.prototype._callback=function(e){u("_callback",e),this._cleanup(),this.aborting||(e&&(u("message",e),this.emit("message",e)),this.emit("close",null,"network"),this.removeAllListeners())},l.prototype._abort=function(e){u("_abort",e),this._cleanup(),this.aborting=!0,this.emit("close",e.code,e.message),this.removeAllListeners()},l.prototype._cleanup=function(){if(u("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var e=this.script;e.parentNode.removeChild(e),e.onreadystatechange=e.onerror=e.onload=e.onclick=null,this.script=null}delete t[r.WPrefix][this.id]},l.prototype._scriptError=function(){u("_scriptError");var e=this;this.errorTimer||(this.errorTimer=setTimeout(function(){e.loadedOkay||e._abort(new Error("JSONP script loaded abnormally (onerror)"))},l.scriptErrorTimeout))},l.prototype._createScript=function(e){u("_createScript",e);var n,r=this,s=this.script=t.document.createElement("script");if(s.id="a"+o.string(8),s.src=e,s.type="text/javascript",s.charset="UTF-8",s.onerror=this._scriptError.bind(this),s.onload=function(){u("onload"),r._abort(new Error("JSONP script loaded abnormally (onload)"))},s.onreadystatechange=function(){if(u("onreadystatechange",s.readyState),/loaded|closed/.test(s.readyState)){if(s&&s.htmlFor&&s.onclick){r.loadedOkay=!0;try{s.onclick()}catch(e){}}s&&r._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},void 0===s.async&&t.document.attachEvent)if(i.isOpera())(n=this.script2=t.document.createElement("script")).text="try{var a = document.getElementById('"+s.id+"'); if(a)a.onerror();}catch(x){};",s.async=n.async=!1;else{try{s.htmlFor=s.id,s.event="onclick"}catch(e){}s.async=!0}void 0!==s.async&&(s.async=!0);var a=t.document.getElementsByTagName("head")[0];a.insertBefore(s,a.firstChild),n&&a.insertBefore(n,a.firstChild)},e.exports=l}).call(this,n(2))},function(e,t,n){"use strict";(function(t){var r=n(1),o=n(31),i=n(54),s=n(53);function a(e){if(!a.enabled())throw new Error("Transport created when disabled");o.call(this,e,"/jsonp",s,i)}r(a,o),a.enabled=function(){return!!t.document},a.transportName="jsonp-polling",a.roundTrips=1,a.needBody=!0,e.exports=a}).call(this,n(2))},function(e,t,n){"use strict";var r=n(1),o=n(7),i=n(29),s=n(14),a=n(19);function c(e){if(!a.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr",s,a)}r(c,o),c.enabled=i.enabled,c.transportName="xdr-polling",c.roundTrips=2,e.exports=c},function(e,t,n){"use strict";(function(t){var r=n(1),o=n(10),i=n(4),s=n(3).EventEmitter,a=n(8),c=function(){};function u(e){c(e),s.call(this);var n=this;o.polluteGlobalNamespace(),this.id="a"+a.string(6),e=i.addQuery(e,"c="+decodeURIComponent(o.WPrefix+"."+this.id)),c("using htmlfile",u.htmlfileEnabled);var r=u.htmlfileEnabled?o.createHtmlfile:o.createIframe;t[o.WPrefix][this.id]={start:function(){c("start"),n.iframeObj.loaded()},message:function(e){c("message",e),n.emit("message",e)},stop:function(){c("stop"),n._cleanup(),n._close("network")}},this.iframeObj=r(e,function(){c("callback"),n._cleanup(),n._close("permanent")})}r(u,s),u.prototype.abort=function(){c("abort"),this._cleanup(),this._close("user")},u.prototype._cleanup=function(){c("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete t[o.WPrefix][this.id]},u.prototype._close=function(e){c("_close",e),this.emit("close",null,e),this.removeAllListeners()},u.htmlfileEnabled=!1;var l=["Active"].concat("Object").join("X");if(l in t)try{u.htmlfileEnabled=!!new t[l]("htmlfile")}catch(e){}u.enabled=u.htmlfileEnabled||o.iframeEnabled,e.exports=u}).call(this,n(2))},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";var r=n(1),o=n(3).EventEmitter,i=n(27),s=function(){};function a(e){s(e),o.call(this);var t=this,n=this.es=new i(e);n.onmessage=function(e){s("message",e.data),t.emit("message",decodeURI(e.data))},n.onerror=function(e){s("error",n.readyState,e);var r=2!==n.readyState?"network":"permanent";t._cleanup(),t._close(r)}}r(a,o),a.prototype.abort=function(){s("abort"),this._cleanup(),this._close("user")},a.prototype._cleanup=function(){s("cleanup");var e=this.es;e&&(e.onmessage=e.onerror=null,e.close(),this.es=null)},a.prototype._close=function(e){s("close",e);var t=this;setTimeout(function(){t.emit("close",null,e),t.removeAllListeners()},200)},e.exports=a},function(e,t,n){"use strict";var r=n(1),o=n(3).EventEmitter,i=function(){};function s(e,t,n){i(t),o.call(this),this.Receiver=e,this.receiveUrl=t,this.AjaxObject=n,this._scheduleReceiver()}r(s,o),s.prototype._scheduleReceiver=function(){i("_scheduleReceiver");var e=this,t=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);t.on("message",function(t){i("message",t),e.emit("message",t)}),t.once("close",function(n,r){i("close",n,r,e.pollIsClosing),e.poll=t=null,e.pollIsClosing||("network"===r?e._scheduleReceiver():(e.emit("close",n||1006,r),e.removeAllListeners()))})},s.prototype.abort=function(){i("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},e.exports=s},function(e,t,n){"use strict";var r=n(1),o=n(3).EventEmitter,i=function(){};function s(e,t){i(e),o.call(this),this.sendBuffer=[],this.sender=t,this.url=e}r(s,o),s.prototype.send=function(e){i("send",e),this.sendBuffer.push(e),this.sendStop||this.sendSchedule()},s.prototype.sendScheduleWait=function(){i("sendScheduleWait");var e,t=this;this.sendStop=function(){i("sendStop"),t.sendStop=null,clearTimeout(e)},e=setTimeout(function(){i("timeout"),t.sendStop=null,t.sendSchedule()},25)},s.prototype.sendSchedule=function(){i("sendSchedule",this.sendBuffer.length);var e=this;if(this.sendBuffer.length>0){var t="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,t,function(t){e.sendStop=null,t?(i("error",t),e.emit("close",t.code||1006,"Sending error: "+t),e.close()):e.sendScheduleWait()}),this.sendBuffer=[]}},s.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},s.prototype.close=function(){i("close"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},e.exports=s},function(e,t,n){"use strict";(function(t){var r=n(1),o=n(7),i=n(14),s=n(13),a=n(12),c=n(11);function u(e){if(!a.enabled&&!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr_streaming",i,s)}r(u,o),u.enabled=function(e){return!e.nullOrigin&&(!c.isOpera()&&s.enabled)},u.transportName="xhr-streaming",u.roundTrips=2,u.needBody=!!t.document,e.exports=u}).call(this,n(2))},function(e,t,n){"use strict";(function(t){var n=t.WebSocket||t.MozWebSocket;e.exports=n?function(e){return new n(e)}:void 0}).call(this,n(2))},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e){return decodeURIComponent(e.replace(/\+/g," "))}t.stringify=function(e,t){t=t||"";var n=[];for(var o in"string"!=typeof t&&(t="?"),e)r.call(e,o)&&n.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return n.length?t+n.join("&"):""},t.parse=function(e){for(var t,n=/([^=?&]+)=?([^&]*)/g,r={};t=n.exec(e);){var i=o(t[1]),s=o(t[2]);i in r||(r[i]=s)}return r}},function(e,t,n){"use strict";e.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},function(e,t,n){"use strict";(function(t){t.crypto&&t.crypto.getRandomValues?e.exports.randomBytes=function(e){var n=new Uint8Array(e);return t.crypto.getRandomValues(n),n}:e.exports.randomBytes=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=Math.floor(256*Math.random());return t}}).call(this,n(2))},function(e,t,n){"use strict";var r=n(6),o=n(4),i=n(1),s=n(3).EventEmitter,a=n(64),c=function(){};function u(e,t,n){if(!u.enabled())throw new Error("Transport created when disabled");s.call(this),c("constructor",e);var i=this,l=o.addPath(e,"/websocket");l="https"===l.slice(0,5)?"wss"+l.slice(5):"ws"+l.slice(4),this.url=l,this.ws=new a(this.url,[],n),this.ws.onmessage=function(e){c("message event",e.data),i.emit("message",e.data)},this.unloadRef=r.unloadAdd(function(){c("unload"),i.ws.close()}),this.ws.onclose=function(e){c("close event",e.code,e.reason),i.emit("close",e.code,e.reason),i._cleanup()},this.ws.onerror=function(e){c("error event",e),i.emit("close",1006,"WebSocket connection broken"),i._cleanup()}}i(u,s),u.prototype.send=function(e){var t="["+e+"]";c("send",t),this.ws.send(t)},u.prototype.close=function(){c("close");var e=this.ws;this._cleanup(),e&&e.close()},u.prototype._cleanup=function(){c("_cleanup");var e=this.ws;e&&(e.onmessage=e.onclose=e.onerror=null),r.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},u.enabled=function(){return c("enabled"),!!a},u.transportName="websocket",u.roundTrips=2,e.exports=u},function(e,t,n){"use strict";e.exports=[n(68),n(63),n(29),n(28),n(18)(n(28)),n(24),n(18)(n(24)),n(23),n(56),n(18)(n(23)),n(55)]},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(36),s=n(9);class a{static createDoctorAnswerJson(){const e={expertiseEstimations:{},comment:o()(".comments-input").val()};return o()(".ee-answer-variant.selected").each((t,n)=>{const r=n.classList[1],i=o()(n).parents(".expertise-estimation")[0].classList[1].substr("expertise-estimation-".length);e.expertiseEstimations[i]=r}),JSON.stringify(e)}static createSalesmanAnswerJson(){const e={answers:{}};return o()(".survey-salesman").find("input").each((t,n)=>{const r=n.classList[0].indexOf("-input"),i=n.classList[0].slice(0,r),s=o()(n).val();e.answers[i]=0===s.length?0:parseInt(s)}),JSON.stringify(e)}}var c=n(15);class u{constructor(e){this.wsService=e}static changePhaseByName(e){const t=this.getPhaseIdByName(e);-1!==t&&(console.log("setting "+t),o()(".phase-container").hide(),o()("#"+t).show())}static getPhaseIdByName(e){let t=-1;switch(e){case"FORM_GAME":t="form-game-phase";break;case"CONNECT_PLAYERS":t="connect-players-phase";break;case"SEND_ROLES":t="send-roles-phase";break;case"SEND_INSTRUCTION":t="send-instructions-phase";break;case"CROSSING":case"CROSSING_2":t="crossing-phase";break;case"GAME":case"GAME_2":t="game-phase";break;case"SURVEY":case"SURVEY_2":case"RESULTS":case"DRUGS_DISTRIBUTION":t=-1;break;case"SURVEY_SALESMAN":t="salesman-survey-phase";break;case"SURVEY_DOCTOR":t="doctor-survey-phase";break;case"RESULTS_AVERAGE":t="average-results-phase";break;case"RESULTS_SALESMAN":t="salesman-results-phase";break;case"DISCUSSION":t="discussion-phase";break;case"CHANGE_ROLES":t="change-roles-phase";break;case"DRUGS_DISTRIBUTION_SURVEY":t="drugs-distribution-phase";break;case"EXPECTATION":t="expectation-phase"}return t}handleEeAnswerVariantClick(e){const t=o()(e.currentTarget);t.siblings(".ee-answer-variant").removeClass("selected"),t.addClass("selected"),this.sendDoctorAnswers()}sendDoctorAnswers(){this.wsService.sendToApp("doctor/answer",a.createDoctorAnswerJson())}handleDoctorAnswerSend(){this.sendDoctorAnswers(),u.addInstantMessage("ÐÑÐ²ÐµÑÑ Ð¾ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ñ")}static handleInstructionMessageReceived(e){const t=JSON.parse(e.body);o()(".role-name").text(t.roleName),o()(".instruction").add(o.a.parseHTML(t.instruction))}handleSalesmanAnswerSend(){this.wsService.sendToApp("salesman/answer",a.createSalesmanAnswerJson()),u.addInstantMessage("ÐÑÐ²ÐµÑÑ Ð¾ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ñ")}static addInstantMessage(e){o()(".instant-message").text(e).addClass("success").slideDown().delay(2e3).slideUp()}static handleOpenDrugDistributionHelpPopup(){o()(".drugs-distribution-help-popup").show()}handleDrugsDistributionInputChange(e){const t=o()(e.currentTarget),n=parseInt(t.val());let r=0;if(o()(".drugs-distribution-input").each((e,t)=>{const n=o()(t).val();r+=0===n.length?0:parseInt(n)}),r>12){const e=r-12;t.val(n-e)}}sendDrugsDistribution(){let e={drugPackages:[]};o()(".drugs-distribution-input").each((t,n)=>{const r=o()(n).val();e.drugPackages[t]=0===r.length?0:parseInt(r)}),this.wsService.sendToApp("drugDistribution",JSON.stringify(e)),u.addInstantMessage("ÐÑÐ²ÐµÑÑ Ð¾ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ñ")}static handleSalesmanResultsReceived(e){const t=JSON.parse(e.body);console.log(t);for(let e in t.competenciesAverage)o()("."+e+"-player-result").text(t.competenciesAverage[e]);const n=t.playerAnswersPerRound["patient-number"].length;for(let e=0;e<n;e++){const n=o()(".round-results-"+e);for(let r in t.playerAnswersPerRound)n.find("."+r+"-player-answer").text(t.playerAnswersPerRound[r][e]),n.find("."+r+"-correct-answer").text(t.correctAnswersPerRound[r][e]),n.find("."+r+"-error").text(t.errorPerRound[r][e]).removeClass("error-very-high error-high error-nearly-high error-mid error-low error-very-low").addClass("error-"+t.errorCssClassPerRound[r][e])}o()(".comment").not(".comment-template").remove(),t.comments.forEach(e=>{if(e.length>0){const t=o()(".comment-template");t.clone().text(e).insertAfter(t).removeClass("hidden comment-template")}})}static handleAverageAnswersReceived(e){const t=JSON.parse(e.body);for(let e in t.averageCompetenciesResults)o()("."+e+"-average-result").text(t.averageCompetenciesResults[e]);for(let e in t.averageError)o()("."+e+"-average-error").text(t.averageError[e]).removeClass("error-very-high error-high error-nearly-high error-mid error-low error-very-low").addClass("error-"+t.averageErrorCssClass[e])}static handleScroll(){o()(window).scrollTop()>35?o()(".timer").addClass("fixed-to-top"):o()(".timer").removeClass("fixed-to-top")}static handleTimerMessageReceived(e){const t=o()(".timer");let n=c.a.getSeconds(e.body),r=c.a.getMinutes(e.body);0===r&&n<11?t.addClass("last-ten-seconds"):t.removeClass("last-ten-seconds"),t.text(c.a.convertToTimerString(r,n))}}const l=s.a.getGameId(),f=s.a.getPlayerId(),p=new i.a(l,"rolePlay"),h=new u(p);o()(".phase-container").hide(),o()(".phase-container.active").show(),o()(".logout-text").click(()=>{o()(".logout-popup").show()}),o()(".ee-answer-variant").click(e=>h.handleEeAnswerVariantClick(e)),o()(".doctor-send-responses-btn").click(()=>h.handleDoctorAnswerSend()),o()(".salesman-send-responses-btn").click(()=>h.handleSalesmanAnswerSend()),o()(".drugs-distribution-help-btn").click(()=>u.handleOpenDrugDistributionHelpPopup()),o()(".popup-back").click(()=>o()(".popup-wrapper").hide()),o()(".close-popup-btn").click(()=>o()(".popup-wrapper").hide()),o()(".drugs-distribution-input").on("input",e=>h.handleDrugsDistributionInputChange(e)),o()(".drugs-distribution-send-responses-btn").click(()=>h.sendDrugsDistribution()),o()(window).scroll(e=>u.handleScroll()),p.connect(function(){const e="/queue/rolePlay/player/"+f;p.subscribe(e+"/instructions",e=>{u.handleInstructionMessageReceived(e)}),p.subscribe(e+"/crossing",e=>{const t=JSON.parse(e.body);o()(".hospital-number").text(parseInt(t.hospital)+1),o()(".room-number").text(parseInt(t.room)+1)}),p.subscribe("/topic/game/"+l+"/changePhase",e=>{u.changePhaseByName(e.body)}),p.subscribe(e+"/changePhase",e=>{u.changePhaseByName(e.body)}),p.subscribe(e+"/yourResults",e=>{u.handleSalesmanResultsReceived(e)}),p.subscribe(e+"/averageResults",e=>{u.handleAverageAnswersReceived(e)}),p.subscribe("/topic/game/"+l+"/timer",e=>{u.handleTimerMessageReceived(e)}),o()(".preloader").fadeOut()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,